#include "sc220at.h"
#include "../../utils/ihex/kk_ihex_read.h"
#include "../../utils/ihex/kk_ihex_write.h"

isp::Sc220At::Sc220At(std::shared_ptr<fbd::Base> device)
	:Base(device)
{

}

isp::Sc220At::~Sc220At()
{
}

bool isp::Sc220At::initialize()
{
	bool result = false, success = true;
	do
	{
		if (sensor_type_ == SensorType::SC220AT_EEPROM_9296A_UNIVERSAL || sensor_type_ == SensorType::SC233AT_EEPROM_9296A_UNIVERSAL)
		{
			//uint8_t slave[] = 
			//{
			//	0x90, 0x90, 0x90, 0x00, 0x80,
			//	0x00, 0x80, 0x80, 0x80, 0x90,
			//	0x90, 0x90, 0x90, 0x90, 0x90,
			//	0x90, 0x00, 0x00, 0x80, 0x90,
			//	0x80
			//};

			//uint32_t addr[] = 
			//{
			//	0x0001, 0x0010, 0x0313, 0x0000, 0x02be,
			//	0x0000, 0x03f0, 0x03f1, 0x0570, 0x0330,
			//	0x044a, 0x0051, 0x0052, 0x0332, 0x0333,
			//	0x0320, 0x0000, 0x0000, 0x02be, 0x0313,
			//	0x02d6
			//};

			//uint8_t data[] = 
			//{
			//	0x01, 0x31, 0x00, 0xff, 0x01,
			//	0xff, 0x51, 0x09, 0x20, 0x04,
			//	0xd0, 0x02, 0x01, 0x30, 0x4e,
			//	0x2f, 0xff, 0xff, 0x10, 0x02,
			//	0x00
			//};


			uint8_t slave[] = 
			{
				0x90, 0x90, 0x90, 0x00, 0x80,
				0x00, 0x80, 0x80, 0x80, 0x90,
				0x90, 0x90, 0x90, 0x90, 0x90,
				0x90, 0x00, 0x00, 0x80, 0x90,
				0x80
			};

			uint32_t addr[] = 
			{
				0x0001, 0x0010, 0x0313, 0x0000, 0x02cd,
				0x0000, 0x03f0, 0x03f1, 0x0570, 0x0330,
				0x044a, 0x0051, 0x0052, 0x0332, 0x0333,
				0x0320, 0x0000, 0x0000, 0x02cd, 0x0313,
				0x02d6
			};

			uint8_t data[] = 
			{
				0x01, 0x31, 0x00, 0xff, 0x00,
				0xff, 0x51, 0x09, 0x20, 0x04,
				0xd0, 0x02, 0x01, 0x30, 0x4e,
				0x2f, 0xff, 0xff, 0x10, 0x02,
				0x00
			};

			if (sizeof(addr) / sizeof(*addr) != sizeof(data))
			{
				setLastError("地址列表与数据列表大小不一致");
				break;
			}

			for (int i = 0; i < sizeof(slave); i++)
			{
				if (slave[i] != 0)
				{
					if (!device_->i2cAddrWrite(addr[i], 2, &data[i], 1, false, slave[i]))
					{
						success = false;
						setLastError(device_->getLastError());
						break;
					}
					std::this_thread::sleep_for(std::chrono::milliseconds(10));
				}
				else
				{
					std::this_thread::sleep_for(std::chrono::milliseconds(0xff));
				}
			}

			if (!success)
			{
				break;
			}
		}
		else if (sensor_type_ == SensorType::SC220AT_EEPROM_NS6603_UNIVERSAL || 
			sensor_type_ == SensorType::SC233AT_EEPROM_NS6603_UNIVERSAL ||
			sensor_type_ == SensorType::SC121AT_EEPROM_NS6603_UNIVERSAL) {

			std::vector<std::initializer_list<uint8_t>> data;
			data.push_back({ 0x5c, 0x01, 0x08, 0x98, 0x1d, 0x21, 0x10, 0xff, 0xff, 0x08, 0xd8, 0x1d,
			0xff, 0xff, 0xff, 0xff, 0x08, 0x98, 0x1c, 0xff, 0xff, 0x1b, 0x1f, 0xb7, 0x68 });

			data.push_back({ 0x1c, 0x07, 0xc8, 0x01, 0x01, 0xff, 0xff, 0x00, 0x80, 0xc0, 0x01, 0x05,
			0x08, 0x80, 0xc0, 0x41, 0x05, 0x31, 0x00, 0xc0, 0x81, 0x05, 0x80, 0x80, 0xc0, 0xc1, 0x05,
			0x00, 0x28, 0xc0, 0x01, 0x06, 0x60, 0x80, 0xc0, 0x41, 0x06, 0x40, 0x22, 0xc8, 0x01, 0x0d,
			0xff, 0xff, 0x02, 0x00, 0xc8, 0x01, 0x0d, 0xff, 0xff, 0x01, 0x00, 0x0d, 0x0a, 0x00, 0x00,
			0x00, 0xc8, 0x01, 0x0d, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x41,
			0x06, 0x00, 0x00, 0x00, 0x20, 0xc8, 0x41, 0x06, 0xff, 0xff, 0x00, 0x40, 0x0d, 0xe8, 0x03,
			0x00, 0x00, 0xc8, 0x41, 0x06, 0xff, 0xff, 0x00, 0x80, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0xc8,
			0x41, 0x06, 0xff, 0xff, 0x00, 0x10, 0x08, 0x18, 0xc4, 0xff, 0xff, 0x0e, 0x00, 0x75, 0x8a });

			data.push_back({ 0x3c, 0x03, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0x18, 0x0c,
			0x00, 0x00, 0x0f, 0x00, 0xd5, 0x18, 0x0d, 0x00, 0x00, 0x0f, 0x00, 0xd5, 0x18, 0x0e, 0x00,
			0x00, 0x0f, 0x00, 0xd5, 0x18, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x0d, 0x63, 0x00, 0x00, 0x00,
			0xca, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xcf });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x00, 0x08, 0x9f, 0x02, 0x94, 0xeb, 0x0a, 0x52,
			0x58, 0x20, 0x48, 0x4f, 0x4f, 0x4b, 0x20, 0x76, 0x25, 0x62, 0x75, 0x2e, 0x25, 0x62, 0x75,
			0x2e, 0x25, 0x62, 0x75, 0x2e, 0x25, 0x62, 0x75, 0x0a, 0x00, 0x48, 0x04, 0xc8, 0x01, 0x01,
			0xff, 0xff, 0x00, 0x80, 0xc0, 0x01, 0x05, 0x08, 0x80, 0xc0, 0x41, 0x05, 0x31, 0x00, 0xc0,
			0x81, 0x05, 0x80, 0x80, 0xc0, 0xc1, 0x05, 0x00, 0x28, 0xc0, 0x01, 0x06, 0x60, 0x80, 0xc0,
			0x41, 0x06, 0x40, 0x22, 0xc8, 0x01, 0x0d, 0xff, 0xff, 0x02, 0x00, 0xc8, 0x01, 0x0d, 0xff,
			0xff, 0x01, 0x00, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x0d, 0x00, 0x00, 0x02, 0x00,
			0x0d, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x5f, 0x00, 0x00, 0xd8, 0x1a, 0x08, 0x9b,
			0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x1b, 0x00, 0x04, 0x00, 0x00, 0x5b, 0x00, 0x08, 0x81,
			0x00, 0x9b, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x24,
			0x00, 0x5b, 0x01, 0x30, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x20, 0x00, 0xdb, 0x01, 0x00, 0x00,
			0x00, 0x1b, 0x02, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x10, 0x03, 0x00, 0xdb, 0x03, 0xdc, 0x77,
			0x08, 0x1b, 0x04, 0x39, 0x00, 0x87, 0xff, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x00, 0x9b, 0x04,
			0x00, 0x00, 0x00, 0xdb, 0x04, 0x00, 0x00, 0x00, 0x1b, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x05,
			0x00, 0x00, 0x00, 0x9b, 0x05, 0x00, 0x80, 0x00, 0xdb, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x06,
			0x3e, 0x1b, 0x00, 0x9b, 0x06, 0x67, 0x77, 0x00, 0xdb, 0x06, 0x3e, 0x1b, 0x00, 0x1b, 0x07,
			0x67, 0x77, 0x00, 0x5b, 0x07, 0x3e, 0x1b, 0x00, 0x9b, 0x07, 0x66, 0x77, 0x00, 0x5b, 0x08,
			0x00, 0x46, 0x00, 0x9b, 0x08, 0x00, 0x00, 0x00, 0xdb, 0x08, 0x6c, 0x0c, 0x0d, 0x10, 0x27,
			0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0xc1, 0x00, 0xdb, 0x02, 0x10, 0x14, 0x00, 0x1b, 0x03,
			0x10, 0xf4, 0x00, 0x5b, 0x03, 0x10, 0xf4, 0x00, 0x9b, 0x03, 0x88, 0x08, 0x00, 0x1b, 0x06,
			0x10, 0xf4, 0x00, 0x9b, 0x02, 0x08, 0x80, 0x0d, 0x31, 0x00, 0x00, 0x00, 0x88, 0x1a, 0x00,
			0xff, 0xff, 0x00, 0x1c, 0x80, 0x9a, 0x02, 0x40, 0x00, 0x88, 0x1a, 0x24, 0xff, 0xff, 0x0a,
			0x00, 0x88, 0x1a, 0x00, 0xff, 0xbf, 0x01, 0x60, 0x80, 0x9a, 0x0d, 0x01, 0x00, 0x11, 0x99,
			0x9a, 0x0d, 0xff, 0xff, 0x02, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x80, 0x9a, 0x0d, 0x00, 0x00,
			0x88, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x9b, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00,
			0x5b, 0x00, 0x00, 0x81, 0x0d, 0x88, 0x13, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x34, 0xfc, 0x00,
			0x5b, 0x00, 0x00, 0xff, 0x00, 0x9b, 0x00, 0xf0, 0x19, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00,
			0x1b, 0x01, 0x00, 0x44, 0x00, 0x5b, 0x01, 0x30, 0x22, 0x00, 0x9b, 0x01, 0x3b, 0x26, 0x00,
			0xdb, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x02, 0xff, 0x00, 0x00, 0x5b, 0x02, 0x10, 0x03, 0x00,
			0xdb, 0x03, 0x3f, 0x3f, 0x08, 0x1b, 0x04, 0xa9, 0x41, 0x87, 0xff, 0x00, 0x5b, 0x04, 0x00,
			0x00, 0x00, 0x9b, 0x04, 0x30, 0x00, 0x00, 0xdb, 0x04, 0x00, 0x00, 0x00, 0x1b, 0x05, 0x10,
			0x00, 0x00, 0x5b, 0x05, 0x00, 0x00, 0x00, 0x9b, 0x05, 0x00, 0x00, 0x00, 0xdb, 0x05, 0x00,
			0x00, 0x08, 0x5b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x08, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x04,
			0x0d, 0x14, 0x00, 0x00, 0x00, 0x08, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x51, 0x2d });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x1f, 0x08, 0x9f, 0x01, 0x08, 0x5b, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x11, 0x19, 0xdb, 0x1a, 0xff, 0xff, 0x01, 0x00, 0xe8, 0x03, 0x00, 0x00,
			0x08, 0x5b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x1b, 0x01, 0xff, 0xff, 0x00, 0x04, 0x08,
			0xdb, 0x03, 0xff, 0xff, 0x00, 0x01, 0x00, 0x51, 0xea, 0x00, 0x00, 0xc8, 0x12, 0x40, 0x9b,
			0x20, 0x10, 0x00, 0x40, 0xdb, 0x20, 0x00, 0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b,
			0x28, 0x40, 0x00, 0x40, 0xdb, 0x28, 0x88, 0x01, 0x40, 0x1b, 0x36, 0x10, 0x40, 0x40, 0xdb,
			0x37, 0x00, 0x01, 0x40, 0x5b, 0x28, 0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b,
			0x38, 0x00, 0x02, 0x40, 0x5b, 0x24, 0xff, 0x80, 0x40, 0x1b, 0x28, 0x6f, 0x03, 0x40, 0x5b,
			0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb,
			0x36, 0xac, 0x00, 0x40, 0x1b, 0x37, 0xcc, 0xcc, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b,
			0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x48, 0x5b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01,
			0x00, 0x48, 0xdb, 0x25, 0xff, 0xff, 0x02, 0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00,
			0x48, 0x1b, 0x24, 0x01, 0x00, 0x01, 0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48,
			0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xb8, 0x0b, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff,
			0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00,
			0x02, 0x00, 0x40, 0x5b, 0x36, 0x01, 0x00, 0x40, 0xdb, 0x36, 0xaa, 0x00, 0x40, 0x1b, 0x37,
			0xaa, 0xaa, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xb8, 0x0b, 0x00, 0x00, 0x48,
			0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b,
			0x24, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x04, 0x48, 0x1b, 0x00,
			0x00, 0x00, 0x00, 0x08, 0x48, 0x1a, 0x00, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1a, 0x01, 0x00,
			0x00, 0x04, 0x00, 0x48, 0x9a, 0x00, 0xff, 0xff, 0x01, 0x00, 0x48, 0x5a, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x02,
			0x00, 0x0d, 0x00, 0x12, 0x00, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
			0x0a, 0xd6, 0x00, 0x00, 0xc8, 0x12, 0x40, 0x9b, 0x20, 0x10, 0x00, 0x40, 0xdb, 0x20, 0x00,
			0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b, 0x28, 0x40, 0x00, 0x40, 0xdb, 0x28, 0x88,
			0x01, 0x40, 0x1b, 0x36, 0x10, 0x40, 0x40, 0xdb, 0x37, 0x00, 0x01, 0x40, 0x5b, 0x28, 0x50,
			0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0x5b, 0x24, 0xff,
			0x80, 0x40, 0x1b, 0x28, 0x6f, 0x03, 0x40, 0x5b, 0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c,
			0x10, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb, 0x36, 0xac, 0x00, 0x40, 0x1b, 0x37, 0xcc,
			0xcc, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b, 0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00, 0x00,
			0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x5b, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01, 0x00, 0x48, 0xdb, 0x25, 0xff, 0xff, 0x02,
			0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x2b, 0x90 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x3e, 0x08, 0x9f, 0x01, 0x00, 0x01, 0x70, 0x55,
			0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xb8,
			0x0b, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff,
			0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00, 0x02, 0x00, 0x40, 0x5b, 0x36, 0x01, 0x00, 0x40,
			0xdb, 0x36, 0xaa, 0x00, 0x40, 0x1b, 0x37, 0xaa, 0xaa, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09,
			0x70, 0x0d, 0xb8, 0x0b, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b,
			0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x1a, 0x00, 0xff,
			0xff, 0x01, 0x00, 0x48, 0x1a, 0x01, 0x00, 0x00, 0x04, 0x00, 0x48, 0x9a, 0x00, 0xff, 0xff,
			0x01, 0x00, 0x48, 0x5a, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x01,
			0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x02, 0x00, 0x0d, 0x00, 0x12, 0x00, 0x00, 0x48, 0x1a,
			0x08, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x0a, 0xd6, 0x00, 0x00, 0xc8, 0x12, 0x40, 0x9b,
			0x20, 0x10, 0x00, 0x40, 0xdb, 0x20, 0x00, 0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b,
			0x28, 0x40, 0x00, 0x40, 0xdb, 0x28, 0x88, 0x01, 0x40, 0x1b, 0x36, 0x10, 0x40, 0x40, 0xdb,
			0x37, 0x00, 0x01, 0x40, 0x5b, 0x28, 0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b,
			0x38, 0x00, 0x02, 0x40, 0x5b, 0x24, 0xff, 0x80, 0x40, 0x1b, 0x28, 0x6f, 0x03, 0x40, 0x5b,
			0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb,
			0x36, 0xac, 0x00, 0x40, 0x1b, 0x37, 0xcc, 0xcc, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b,
			0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x48, 0x5b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01,
			0x00, 0x48, 0xdb, 0x25, 0xff, 0xff, 0x02, 0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00,
			0x48, 0x1b, 0x24, 0x01, 0x00, 0x01, 0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48,
			0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xd0, 0x07, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff,
			0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00,
			0x02, 0x00, 0x40, 0x5b, 0x36, 0x01, 0x00, 0x40, 0xdb, 0x36, 0xaa, 0x00, 0x40, 0x1b, 0x37,
			0xaa, 0xaa, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xd0, 0x07, 0x00, 0x00, 0x48, 
			0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b,
			0x24, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x04, 0x48, 0x1b, 0x00,
			0x00, 0x00, 0x00, 0x08, 0x48, 0x1a, 0x00, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1a, 0x01, 0x00,
			0x00, 0x04, 0x00, 0x48, 0x9a, 0x00, 0xff, 0xff, 0x01, 0x00, 0x48, 0x5a, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x02, 
			0x00, 0x0d, 0x00, 0x12, 0x00, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
			0xb5, 0xa9, 0x00, 0x00, 0xc8, 0x12, 0x40, 0x9b, 0x20, 0x10, 0x00, 0x40, 0xdb, 0x20, 0x00,
			0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b, 0x28, 0x40, 0x00, 0x4c, 0xc4 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x5d, 0x08, 0x9f, 0x40, 0xdb, 0x28, 0x88, 0x01,
			0x40, 0x1b, 0x36, 0x10, 0x40, 0x40, 0xdb, 0x37, 0x00, 0x01, 0x40, 0x5b, 0x28, 0x50, 0x00,
			0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0x5b, 0x24, 0xff, 0x80,
			0x40, 0x1b, 0x28, 0x8f, 0x03, 0x40, 0x5b, 0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10,
			0x40, 0x5b, 0x36, 0x01, 0x00, 0x40, 0xdb, 0x36, 0xac, 0x00, 0x40, 0x1b, 0x37, 0xcc, 0xcc,
			0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b, 0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x5b, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01, 0x00, 0x48, 0xdb, 0x25, 0xff, 0xff, 0x02, 0x00,
			0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x00, 0x01, 0x70, 0x55,
			0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09, 0x70, 0x0d, 0xd0,
			0x07, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b, 0x24, 0xff, 0xff,
			0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00, 0x02, 0x00, 0x40, 0x5b, 0x36, 0xff, 0x01, 0x40,
			0xdb, 0x36, 0xaa, 0x00, 0x40, 0x1b, 0x37, 0xaa, 0xaa, 0x48, 0x1b, 0x24, 0x01, 0x40, 0x09,
			0x70, 0x0d, 0xd0, 0x07, 0x00, 0x00, 0x48, 0x1b, 0x24, 0xff, 0xff, 0x02, 0x00, 0x55, 0x9b,
			0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x1a, 0x00, 0xff,
			0xff, 0x01, 0x00, 0x48, 0x1a, 0x01, 0x00, 0x00, 0x04, 0x00, 0x48, 0x9a, 0x00, 0xff, 0xff,
			0x01, 0x00, 0x48, 0x5a, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x01,
			0x00, 0x48, 0x1a, 0x08, 0xff, 0xff, 0x02, 0x00, 0x0d, 0x00, 0x12, 0x00, 0x00, 0x48, 0x1a,
			0x08, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x46, 0x88, 0x00, 0x00, 0x58, 0x02, 0x40, 0x1b,
			0x36, 0x00, 0x40, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0xdb,
			0x36, 0xa6, 0x00, 0x40, 0x1b, 0x37, 0x66, 0x66, 0x40, 0x5b, 0x24, 0xff, 0x89, 0x48, 0x1b,
			0x24, 0x01, 0x40, 0x01, 0x70, 0x00, 0xb7, 0xc5, 0x00, 0x00, 0x38, 0x0a, 0x00, 0x1b, 0x00,
			0x34, 0xfc, 0x00, 0x5b, 0x00, 0x00, 0xff, 0x00, 0x9b, 0x00, 0xf0, 0x19, 0x00, 0xdb, 0x00,
			0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x44, 0x00, 0x5b, 0x01, 0x30, 0x22, 0x00, 0x9b, 0x01,
			0x3b, 0x66, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x02, 0xff, 0x00, 0x00, 0x5b, 0x02,
			0x10, 0x03, 0x00, 0xdb, 0x03, 0x3f, 0x3f, 0x08, 0x1b, 0x04, 0xa9, 0x41, 0x87, 0xff, 0x00,
			0x5b, 0x04, 0x00, 0x00, 0x00, 0x9b, 0x04, 0x30, 0x00, 0x00, 0xdb, 0x04, 0x00, 0x00, 0x00,
			0x1b, 0x05, 0x10, 0x00, 0x00, 0x5b, 0x05, 0x00, 0x00, 0x00, 0x9b, 0x05, 0x00, 0x00, 0x00,
			0xdb, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x3e, 0xd2, 0x00, 0x9b, 0x06, 0x41, 0x77, 0x00,
			0xdb, 0x06, 0x3e, 0x52, 0x00, 0x1b, 0x07, 0x67, 0x77, 0x00, 0x5b, 0x07, 0x3e, 0x52, 0x00,
			0x9b, 0x07, 0x40, 0x77, 0x00, 0x5b, 0x08, 0x01, 0xa4, 0x00, 0x9b, 0x08, 0x00, 0x00, 0x00,
			0xdb, 0x08, 0xc9, 0x8c, 0x08, 0x5b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x08, 0x1b, 0x01, 0x00,
			0x00, 0x00, 0x04, 0x08, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc9, 0xae });
			
			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x7c, 0x08, 0x9f, 0x00, 0x00, 0x1d, 0x0a, 0x00,
			0x00, 0x38, 0x0a, 0x00, 0x1b, 0x00, 0xa6, 0xfb, 0x00, 0x5b, 0x00, 0xe0, 0x5e, 0x00, 0x9b,
			0x00, 0xf0, 0x04, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x44, 0x00, 0x5b,
			0x01, 0x30, 0x22, 0x00, 0x9b, 0x01, 0x5b, 0x66, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x00, 0x1b,
			0x02, 0xaa, 0x00, 0x00, 0x5b, 0x02, 0xf0, 0x01, 0x00, 0xdb, 0x03, 0x3f, 0x3f, 0x08, 0x1b,
			0x04, 0xa9, 0x79, 0x87, 0xff, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x00, 0x9b, 0x04, 0x30, 0x00,
			0x00, 0xdb, 0x04, 0x00, 0x00, 0x00, 0x1b, 0x05, 0x08, 0x00, 0x00, 0x5b, 0x05, 0x00, 0x00,
			0x00, 0x9b, 0x05, 0x00, 0x80, 0x00, 0xdb, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x3e, 0x9b,
			0x00, 0x9b, 0x06, 0x41, 0x77, 0x00, 0xdb, 0x06, 0x3e, 0x1b, 0x00, 0x1b, 0x07, 0x67, 0x77,
			0x00, 0x5b, 0x07, 0x3e, 0x1b, 0x00, 0x9b, 0x07, 0x40, 0x77, 0x00, 0x5b, 0x08, 0x01, 0xc6,
			0x00, 0x9b, 0x08, 0x00, 0x00, 0x00, 0xdb, 0x08, 0x6d, 0x8c, 0x08, 0x5b, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x08, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x04, 0x08, 0xdb, 0x03, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x7d, 0xa2, 0x00, 0x00, 0x38, 0x0a, 0x00, 0x1b, 0x00, 0xa6, 0xfb,
			0x00, 0x5b, 0x00, 0xe0, 0x5e, 0x00, 0x9b, 0x00, 0xf0, 0x04, 0x00, 0xdb, 0x00, 0x00, 0x00,
			0x00, 0x1b, 0x01, 0x00, 0x44, 0x00, 0x5b, 0x01, 0x30, 0x22, 0x00, 0x9b, 0x01, 0x5b, 0x66,
			0x00, 0xdb, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x02, 0xaa, 0x00, 0x00, 0x5b, 0x02, 0xf0, 0x01,
			0x00, 0xdb, 0x03, 0x3f, 0x3f, 0x08, 0x1b, 0x04, 0xa9, 0x79, 0x87, 0xff, 0x00, 0x5b, 0x04,
			0x00, 0x00, 0x00, 0x9b, 0x04, 0x30, 0x00, 0x00, 0xdb, 0x04, 0x00, 0x00, 0x00, 0x1b, 0x05,
			0x00, 0x00, 0x00, 0x5b, 0x05, 0x00, 0x00, 0x00, 0x9b, 0x05, 0x00, 0x80, 0x00, 0xdb, 0x05,
			0x00, 0x00, 0x00, 0x5b, 0x06, 0x3e, 0xd2, 0x00, 0x9b, 0x06, 0x41, 0x77, 0x00, 0xdb, 0x06,
			0x3e, 0xd2, 0x00, 0x1b, 0x07, 0x41, 0x77, 0x00, 0x5b, 0x07, 0x3e, 0x52, 0x00, 0x9b, 0x07,
			0x40, 0x77, 0x00, 0x5b, 0x08, 0x00, 0xa4, 0x00, 0x9b, 0x08, 0x00, 0x00, 0x00, 0xdb, 0x08,
			0x49, 0x8c, 0x08, 0x5b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x08, 0x1b, 0x01, 0x00, 0x00, 0x00,
			0x04, 0x08, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xcb, 0xd4, 0x00, 0x00,
			0x38, 0x0a, 0x00, 0x1b, 0x00, 0xa6, 0xfb, 0x00, 0x5b, 0x00, 0xe0, 0x5e, 0x00, 0x9b, 0x00,
			0xf0, 0x04, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x44, 0x00, 0x5b, 0x01,
			0x30, 0x22, 0x00, 0x9b, 0x01, 0x5b, 0x66, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x02,
			0xaa, 0x00, 0x00, 0x5b, 0x02, 0xf0, 0x01, 0x00, 0xdb, 0x03, 0x3f, 0x3f, 0x08, 0x1b, 0x04,
			0xa9, 0x79, 0x87, 0xff, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x00, 0x9b, 0x04, 0x30, 0x00, 0x00,
			0xdb, 0x04, 0x00, 0x00, 0x00, 0x1b, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x05, 0x00, 0x00, 0x00,
			0x9b, 0x05, 0x00, 0x80, 0x00, 0xdb, 0x05, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x3e, 0x9b, 0x00,
			0x9b, 0x06, 0x41, 0x77, 0x00, 0xdb, 0x06, 0x3e, 0x9b, 0x00, 0x1b, 0x07, 0x41, 0x77, 0x00,
			0x5b, 0x07, 0x3e, 0x1b, 0x00, 0x9b, 0x07, 0x40, 0x77, 0x00, 0x5b, 0x08, 0x00, 0xc6, 0x00,
			0x9b, 0x08, 0x00, 0x00, 0x00, 0xdb, 0x08, 0x6d, 0xb8, 0x08, 0x5b, 0x85, 0x31 });
			
			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x9b, 0x08, 0x9f, 0x00, 0xff, 0xff, 0x02, 0x00,
			0x08, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x04, 0x08, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0x7e, 0x6f, 0x00, 0x00, 0x28, 0x10, 0x08, 0x9b, 0x05, 0x00, 0x00, 0x00, 0x80,
			0x08, 0x1b, 0x04, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x1b, 0x3b,
			0x00, 0x00, 0x40, 0x1b, 0x3a, 0x50, 0x15, 0x40, 0x5b, 0x3a, 0x1c, 0x24, 0x40, 0x9b, 0x26,
			0x41, 0x3f, 0x40, 0x5b, 0x26, 0x52, 0x2e, 0x40, 0x1b, 0x26, 0x00, 0x00, 0x40, 0x1b, 0x27,
			0x00, 0x00, 0x40, 0xdb, 0x26, 0x00, 0x00, 0x40, 0x5b, 0x20, 0x00, 0x00, 0x40, 0x5b, 0x21,
			0x00, 0x00, 0x40, 0x9b, 0x20, 0x10, 0x01, 0x40, 0xdb, 0x20, 0x00, 0x08, 0x40, 0xdb, 0x21,
			0x08, 0x00, 0x40, 0x9b, 0x28, 0x00, 0x00, 0x40, 0xdb, 0x28, 0x88, 0x01, 0x40, 0x1b, 0x3c,
			0x20, 0x40, 0x40, 0x1b, 0x36, 0x80, 0x40, 0x40, 0xdb, 0x37, 0x00, 0x01, 0x40, 0x5b, 0x28,
			0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0x5b, 0x24,
			0xff, 0x80, 0x40, 0x5b, 0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10, 0x40, 0x1b, 0x3d,
			0x20, 0x20, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb, 0x36, 0xab, 0x00, 0x40, 0x1b, 0x37,
			0xbb, 0xbb, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b, 0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x5b, 0x00, 0x00,
			0x00, 0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01, 0x00, 0x48, 0x1b, 0x28, 0xff, 0xff,
			0x10, 0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x50, 0x01,
			0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x9b, 0x25, 0xff, 0xff, 0x02, 0x00,
			0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x9b, 0x05, 0xff, 0xff, 0x00, 0x80, 0x08,
			0x1b, 0x04, 0xff, 0xff, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0xb3, 0x46, 0x00, 0x00,
			0x28, 0x10, 0x08, 0x9b, 0x05, 0x00, 0x00, 0x00, 0x80, 0x08, 0x1b, 0x04, 0x00, 0x00, 0x00,
			0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x1b, 0x3b, 0x00, 0x00, 0x40, 0x1b, 0x3a, 0x50,
			0x25, 0x40, 0x5b, 0x3a, 0x1c, 0x24, 0x40, 0x9b, 0x26, 0x41, 0x3f, 0x40, 0x5b, 0x26, 0x52,
			0x2e, 0x40, 0x1b, 0x26, 0x01, 0x00, 0x40, 0x1b, 0x27, 0x00, 0x00, 0x40, 0xdb, 0x26, 0x00,
			0x00, 0x40, 0x5b, 0x20, 0x00, 0x00, 0x40, 0x5b, 0x21, 0x00, 0x00, 0x40, 0x9b, 0x20, 0x10,
			0x01, 0x40, 0xdb, 0x20, 0x00, 0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b, 0x28, 0x00,
			0x00, 0x40, 0xdb, 0x28, 0x88, 0x01, 0x40, 0x1b, 0x3c, 0x20, 0x40, 0x40, 0x1b, 0x36, 0x80,
			0x40, 0x40, 0xdb, 0x37, 0x00, 0x01, 0x40, 0x5b, 0x28, 0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2,
			0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0x5b, 0x24, 0xff, 0x80, 0x40, 0x5b, 0x3c, 0x40,
			0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10, 0x40, 0x1b, 0x3d, 0x20, 0x20, 0x40, 0x5b, 0x36, 0x00,
			0x00, 0x40, 0xdb, 0x36, 0xab, 0x00, 0x40, 0x1b, 0x37, 0xbb, 0xbb, 0x40, 0x5b, 0x37, 0x0b,
			0x0b, 0x40, 0x9b, 0x37, 0x0b, 0x0b, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b,
			0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x5b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x48, 0x1b, 0x20,
			0x00, 0x00, 0x01, 0x00, 0x48, 0x1b, 0x28, 0xff, 0xff, 0x10, 0x00, 0xf7, 0xf5 });
			
			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xba, 0x08, 0x9f, 0x48, 0x1b, 0x20, 0xff, 0xff, 
			0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x50, 0x01, 0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 
			0x00, 0x48, 0x9b, 0x25, 0xff, 0xff, 0x02, 0x00, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 
			0x08, 0x9b, 0x05, 0xff, 0xff, 0x00, 0x80, 0x08, 0x1b, 0x04, 0xff, 0xff, 0x00, 0x01, 0x0d, 
			0x0a, 0x00, 0x00, 0x00, 0x8d, 0x23, 0x00, 0x00, 0xc8, 0x17, 0x08, 0x9b, 0x06, 0x00, 0x00,
			0x01, 0x00, 0x08, 0x5b, 0x06, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x08,
			0x5b, 0x06, 0xff, 0xff, 0x80, 0x00, 0x08, 0x1b, 0x1c, 0xff, 0xff, 0x08, 0x00, 0x08, 0x1b,
			0x1c, 0xff, 0xff, 0x04, 0x00, 0x08, 0x1b, 0x1c, 0xff, 0xff, 0x01, 0x00, 0x15, 0x1b, 0x1c,
			0xff, 0xff, 0x10, 0x00, 0x08, 0x9b, 0x06, 0xff, 0xff, 0x01, 0x00, 0x08, 0x1b, 0x07, 0x00, 
			0x00, 0x01, 0x00, 0x08, 0xdb, 0x06, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00,
			0x08, 0xdb, 0x06, 0xff, 0xff, 0x80, 0x00, 0x08, 0x9b, 0x1c, 0xff, 0xff, 0x08, 0x00, 0x08, 
			0x9b, 0x1c, 0xff, 0xff, 0x04, 0x00, 0x08, 0x9b, 0x1c, 0xff, 0xff, 0x01, 0x00, 0x15, 0x9b, 
			0x1c, 0xff, 0xff, 0x10, 0x00, 0x08, 0x1b, 0x07, 0xff, 0xff, 0x01, 0x00, 0x08, 0x9b, 0x05, 
			0x00, 0x00, 0x00, 0x80, 0x08, 0x1b, 0x04, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00,
			0x00, 0x40, 0x1b, 0x3b, 0x00, 0x00, 0x40, 0x1b, 0x3a, 0x60, 0x16, 0x40, 0x5b, 0x3a, 0x1c, 
			0x24, 0x40, 0x9b, 0x26, 0x41, 0x3f, 0x40, 0x5b, 0x26, 0x52, 0x2e, 0x40, 0x1b, 0x26, 0x11,
			0x00, 0x40, 0x1b, 0x27, 0x00, 0x00, 0x40, 0xdb, 0x26, 0x00, 0x00, 0x40, 0x5b, 0x20, 0x00,
			0x00, 0x40, 0x5b, 0x21, 0x00, 0x00, 0x40, 0x9b, 0x20, 0x10, 0x01, 0x40, 0xdb, 0x20, 0x00, 
			0x08, 0x40, 0xdb, 0x21, 0x08, 0x00, 0x40, 0x9b, 0x28, 0x00, 0x00, 0x40, 0xdb, 0x28, 0x88,
			0x01, 0x40, 0x1b, 0x3c, 0x20, 0x40, 0x40, 0x1b, 0x36, 0x80, 0x40, 0x40, 0xdb, 0x37, 0x00, 
			0x01, 0x40, 0x5b, 0x28, 0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00,
			0x02, 0x40, 0x5b, 0x24, 0xff, 0x80, 0x40, 0x5b, 0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c,
			0x10, 0x40, 0x1b, 0x3d, 0x20, 0x20, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb, 0x36, 0xab, 
			0x00, 0x40, 0x1b, 0x37, 0xbb, 0xbb, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b, 0x37, 0x0b, 
			0x0b, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff, 0x02, 0x00,
			0x48, 0x5b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01, 0x00, 0x48, 
			0x1b, 0x28, 0xff, 0xff, 0x10, 0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b,
			0x24, 0x01, 0x50, 0x01, 0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x9b, 0x25,
			0xff, 0xff, 0x02, 0x00, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x9b, 0x05, 0xff,
			0xff, 0x00, 0x80, 0x08, 0x1b, 0x04, 0xff, 0xff, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x73, 0xdc, 0x00, 0x00, 0xc8, 0x17, 0x08, 0x9b, 0x06, 0x00, 0x00, 0x01, 0x00, 
			0x08, 0x5b, 0x06, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x08, 0x5b, 0x06, 
			0xff, 0xff, 0x80, 0x00, 0x08, 0x1b, 0x1c, 0xff, 0xff, 0x08, 0x00, 0x08, 0x1b, 0x1c, 0xff,
			0xff, 0x04, 0x00, 0x08, 0x1b, 0x1c, 0xff, 0xff, 0x01, 0x00, 0x15, 0xbf, 0x6f });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xd9, 0x08, 0x9f, 0x1b, 0x1c, 0xff, 0xff, 0x10,
			0x00, 0x08, 0x9b, 0x06, 0xff, 0xff, 0x01, 0x00, 0x08, 0x1b, 0x07, 0x00, 0x00, 0x01, 0x00,
			0x08, 0xdb, 0x06, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x08, 0xdb, 0x06,
			0xff, 0xff, 0x80, 0x00, 0x08, 0x9b, 0x1c, 0xff, 0xff, 0x08, 0x00, 0x08, 0x9b, 0x1c, 0xff,
			0xff, 0x04, 0x00, 0x08, 0x9b, 0x1c, 0xff, 0xff, 0x01, 0x00, 0x15, 0x9b, 0x1c, 0xff, 0xff,
			0x10, 0x00, 0x08, 0x1b, 0x07, 0xff, 0xff, 0x01, 0x00, 0x08, 0x9b, 0x05, 0x00, 0x00, 0x00,
			0x80, 0x08, 0x1b, 0x04, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x1b,
			0x3b, 0x00, 0x00, 0x40, 0x1b, 0x3a, 0x60, 0x26, 0x40, 0x5b, 0x3a, 0x1c, 0x24, 0x40, 0x9b,
			0x26, 0x41, 0x3f, 0x40, 0x5b, 0x26, 0x52, 0x2e, 0x40, 0x1b, 0x26, 0x12, 0x00, 0x40, 0x1b,
			0x27, 0x00, 0x00, 0x40, 0xdb, 0x26, 0x00, 0x00, 0x40, 0x5b, 0x20, 0x00, 0x00, 0x40, 0x5b,
			0x21, 0x00, 0x00, 0x40, 0x9b, 0x20, 0x10, 0x01, 0x40, 0xdb, 0x20, 0x00, 0x08, 0x40, 0xdb,
			0x21, 0x08, 0x00, 0x40, 0x9b, 0x28, 0x00, 0x00, 0x40, 0xdb, 0x28, 0x88, 0x01, 0x40, 0x1b,
			0x3c, 0x20, 0x40, 0x40, 0x1b, 0x36, 0x80, 0x40, 0x40, 0xdb, 0x37, 0x00, 0x01, 0x40, 0x5b,
			0x28, 0x50, 0x00, 0x40, 0x5b, 0x38, 0xa2, 0x01, 0x40, 0x1b, 0x38, 0x00, 0x02, 0x40, 0x5b,
			0x24, 0xff, 0x80, 0x40, 0x5b, 0x3c, 0x40, 0x10, 0x40, 0x9b, 0x3c, 0x3c, 0x10, 0x40, 0x1b,
			0x3d, 0x20, 0x20, 0x40, 0x5b, 0x36, 0x00, 0x00, 0x40, 0xdb, 0x36, 0xab, 0x00, 0x40, 0x1b,
			0x37, 0xbb, 0xbb, 0x40, 0x5b, 0x37, 0x0b, 0x0b, 0x40, 0x9b, 0x37, 0x0b, 0x0b, 0x48, 0x1b,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x1b, 0x00, 0xff, 0xff, 0x02, 0x00, 0x48, 0x5b, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x48, 0x1b, 0x20, 0x00, 0x00, 0x01, 0x00, 0x48, 0x1b, 0x28, 0xff,
			0xff, 0x10, 0x00, 0x48, 0x1b, 0x20, 0xff, 0xff, 0x01, 0x00, 0x48, 0x1b, 0x24, 0x01, 0x50,
			0x01, 0x70, 0x55, 0x9b, 0x24, 0xff, 0xff, 0x01, 0x00, 0x48, 0x9b, 0x25, 0xff, 0xff, 0x02,
			0x00, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x9b, 0x05, 0xff, 0xff, 0x00, 0x80,
			0x08, 0x1b, 0x04, 0xff, 0xff, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53,
			0x87, 0x00, 0x00, 0x58, 0x09, 0xc8, 0x01, 0x07, 0x00, 0x00, 0x04, 0x00, 0xc8, 0x41, 0x07,
			0x00, 0x00, 0x04, 0x00, 0x00, 0xdb, 0x04, 0x30, 0x00, 0x08, 0x9b, 0x02, 0x00, 0x00, 0x00,
			0x80, 0x08, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x5b, 0x01, 0xff, 0xff, 0x10, 0x00,
			0x08, 0x5b, 0x01, 0xff, 0xff, 0x20, 0x00, 0x08, 0xdb, 0x02, 0xff, 0xff, 0x00, 0x10, 0x08,
			0xdb, 0x1f, 0xff, 0xff, 0x00, 0x01, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x08, 0xdb, 0x1f, 0xff,
			0xff, 0x01, 0x00, 0x08, 0xdb, 0x1f, 0xff, 0xff, 0x02, 0x00, 0x08, 0xdb, 0x1f, 0xff, 0xff,
			0x00, 0x02, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x08, 0xdb, 0x1f, 0x00, 0x00, 0x00, 0x02, 0x0d,
			0xe8, 0x03, 0x00, 0x00, 0x08, 0xdb, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x08, 0xdb, 0x1f, 0xff,
			0xff, 0x04, 0x00, 0x08, 0xdb, 0x1f, 0xff, 0xff, 0x00, 0x04, 0x0d, 0xe8, 0x03, 0x00, 0x00,
			0x08, 0xdb, 0x1f, 0x00, 0x00, 0x00, 0x04, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x08, 0xdb, 0x1f,
			0x00, 0x00, 0x04, 0x00, 0x00, 0xb1, 0xfa, 0x00, 0x00, 0x04, 0x04, 0xa1, 0xe3 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xf8, 0x08, 0x9f, 0x81, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x77, 0xdc,
			0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
			0x00, 0x0c, 0x34, 0x41, 0x00, 0x10, 0x00, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x3b,
			0x00, 0x00, 0x00, 0xff, 0x03, 0x10, 0x3f, 0x3f, 0x41, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00,
			0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x34, 0x7f, 0x00, 0x19, 0xf0,
			0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x3b, 0x00, 0x00, 0x00, 0xff, 0x03, 0x10, 0x3f,
			0x3f, 0x41, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0xfc, 0x34, 0x7e, 0x80, 0x19, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66,
			0x3b, 0x00, 0x00, 0x00, 0xff, 0x03, 0x10, 0x3f, 0x3f, 0x41, 0xa9, 0x00, 0x00, 0x00, 0x30,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x81, 0x08, 0x00,
			0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10,
			0x77, 0xdc, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x03, 0xa6, 0x42, 0xe0, 0x05, 0xf0, 0x7e, 0x00, 0x44, 0x00, 0x22, 0x30,
			0x66, 0x1b, 0x00, 0x00, 0x00, 0xcc, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00,
			0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3b, 0xa6, 0x5e, 0xe0, 
			0x00, 0xb0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01,
			0x70, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
			0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x5e, 0xe0, 0x04, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22,
			0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 
			0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x7e,
			0xe0, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa,
			0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0x1e, 0xa6, 0x6e, 0x60, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00,
			0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 
			0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfe, 0xa6, 
			0x7e, 0x60, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00,
			0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 
			0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfe, 0xa6, 0x7e, 0x60, 0x05, 0xf0, 0x00, 0x00, 0x44,
			0x00, 0x22, 0x30, 0xe6, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 
			0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04,
			0x04, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x10, 0x77, 0xdc, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0xa6, 0x42, 0xe0, 0xc1, 0x44 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x17, 0x09, 0x9f, 0x05, 0xf0, 0x7e, 0x00, 0x44,
			0x00, 0x22, 0x30, 0x66, 0x1b, 0x00, 0x00, 0x00, 0xcc, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9,
			0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3b,
			0xa6, 0x5e, 0xe0, 0x00, 0xb0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00,
			0x00, 0xaa, 0x01, 0x70, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x5e, 0xe0, 0x04, 0xf0, 0x00, 0x00,
			0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79,
			0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0xfb, 0xa6, 0x7e, 0xe0, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00,
			0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1e, 0xa6, 0x6e, 0x60, 0x05, 0xf0, 0x00,
			0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f,
			0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
			0x00, 0xfe, 0xa6, 0x7e, 0x60, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b,
			0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfe, 0xa6, 0x7e, 0x60, 0x05, 0xf0,
			0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0xe6, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f,
			0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
			0x00, 0x00, 0x04, 0x04, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x77, 0xdc, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0xa6, 0x42, 0xe0, 0x05,
			0xf0, 0x7e, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x1b, 0x00, 0x00, 0x00, 0xcc, 0x01, 0xf0,
			0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x3b, 0xa6, 0x5e, 0xe0, 0x00, 0xb0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30,
			0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x70, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00,
			0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x5e, 0xe0,
			0x04, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01,
			0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x7e, 0xe0, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22,
			0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00,
			0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x7e,
			0xa0, 0x05, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa,
			0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x7e, 0x80, 0x05, 0xf0, 0x16, 0xd1 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x36, 0x09, 0x9f, 0x00, 0x00, 0x44, 0x00, 0x22,
			0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00,
			0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xfb, 0xa6, 0x7e,
			0x80, 0x09, 0xf0, 0x00, 0x00, 0x44, 0x00, 0x22, 0x30, 0x66, 0x5b, 0x00, 0x00, 0x00, 0xaa,
			0x01, 0xf0, 0x3f, 0x3f, 0x79, 0xa9, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0xeb, 0x9f, 0xf5, 0xf0, 0xea, 0x9e, 0x42, 0xf0, 0xe9, 0x9d,
			0x42, 0xf0, 0xec, 0x64, 0x80, 0xc8, 0x64, 0x80, 0x98, 0x45, 0xf0, 0x22, 0xa4, 0x25, 0x82,
			0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83, 0xf5, 0x83, 0x22, 0x8a, 0x83, 0x89, 0x82, 0xe4, 0x73,
			0xec, 0x8e, 0xf0, 0xa4, 0xcc, 0xc5, 0xf0, 0xcc, 0xcd, 0xf8, 0xef, 0xa4, 0xce, 0xc5, 0xf0,
			0x2d, 0xfd, 0xe4, 0x3c, 0xfc, 0xe8, 0xa4, 0x2e, 0xc8, 0xc5, 0xf0, 0x3d, 0xfd, 0xe4, 0x3c,
			0xfc, 0xef, 0xa4, 0xff, 0xe5, 0xf0, 0x28, 0xfe, 0xe4, 0x3d, 0xfd, 0xe4, 0x3c, 0xfc, 0x22,
			0xe7, 0x09, 0xf6, 0x08, 0xdf, 0xfa, 0x80, 0x46, 0xe7, 0x09, 0xf2, 0x08, 0xdf, 0xfa, 0x80,
			0x3e, 0x88, 0x82, 0x8c, 0x83, 0xe7, 0x09, 0xf0, 0xa3, 0xdf, 0xfa, 0x80, 0x32, 0xe3, 0x09,
			0xf6, 0x08, 0xdf, 0xfa, 0x80, 0x6e, 0xe3, 0x09, 0xf2, 0x08, 0xdf, 0xfa, 0x80, 0x66, 0x88,
			0x82, 0x8c, 0x83, 0xe3, 0x09, 0xf0, 0xa3, 0xdf, 0xfa, 0x80, 0x5a, 0x89, 0x82, 0x8a, 0x83,
			0xe0, 0xa3, 0xf6, 0x08, 0xdf, 0xfa, 0x80, 0x4e, 0x89, 0x82, 0x8a, 0x83, 0xe0, 0xa3, 0xf2,
			0x08, 0xdf, 0xfa, 0x80, 0x42, 0x80, 0xd2, 0x80, 0xfa, 0x80, 0xc6, 0x80, 0xd4, 0x80, 0x55,
			0x80, 0xf2, 0x80, 0x29, 0x80, 0x10, 0x80, 0xa6, 0x80, 0xea, 0x80, 0x9a, 0x80, 0xa8, 0x80,
			0xda, 0x80, 0xe2, 0x80, 0xca, 0x80, 0x29, 0x88, 0x84, 0x8c, 0x85, 0x89, 0x82, 0x8a, 0x83,
			0xe4, 0x93, 0xa3, 0x05, 0x92, 0xf0, 0xa3, 0x15, 0x92, 0xdf, 0xf5, 0xde, 0xf3, 0x80, 0x0b,
			0x89, 0x82, 0x8a, 0x83, 0xe4, 0x93, 0xa3, 0xf6, 0x08, 0xdf, 0xf9, 0xec, 0xfa, 0xa9, 0xf0,
			0xed, 0xfb, 0x22, 0x88, 0x84, 0x8c, 0x85, 0x89, 0x82, 0x8a, 0x83, 0xe0, 0xa3, 0x05, 0x92,
			0xf0, 0xa3, 0x15, 0x92, 0xdf, 0xf6, 0xde, 0xf4, 0x80, 0xe3, 0x89, 0x82, 0x8a, 0x83, 0xe4,
			0x93, 0xa3, 0xf2, 0x08, 0xdf, 0xf9, 0x80, 0xd6, 0x88, 0xf0, 0xef, 0x60, 0x01, 0x0e, 0x4e,
			0x60, 0xcd, 0x88, 0xf0, 0xed, 0x24, 0x02, 0xb4, 0x04, 0x00, 0x50, 0xc3, 0xf5, 0x82, 0xeb,
			0x24, 0x02, 0xb4, 0x04, 0x00, 0x50, 0xb9, 0x23, 0x23, 0x45, 0x82, 0x23, 0x90, 0x94, 0x4b,
			0x73, 0xc3, 0xe4, 0x9f, 0xff, 0xe4, 0x9e, 0xfe, 0xe4, 0x9d, 0xfd, 0xe4, 0x9c, 0xfc, 0x22,
			0x90, 0x40, 0x00, 0x7f, 0x00, 0x7e, 0x40, 0xe4, 0xf0, 0xa3, 0xdf, 0xfc, 0xde, 0xfa, 0x02,
			0x9c, 0x93, 0xec, 0x30, 0xe7, 0x03, 0x12, 0x94, 0xdd, 0x22, 0x7f, 0x01, 0x12, 0x6d, 0xde,
			0x30, 0x0f, 0x16, 0xb1, 0x54, 0x40, 0x0c, 0xef, 0xd3, 0x94, 0x70, 0x50, 0x06, 0x7e, 0x00,
			0x7f, 0x01, 0x80, 0x1a, 0x7e, 0x00, 0x7f, 0x00, 0x80, 0x14, 0xb1, 0x54, 0x40, 0x0c, 0xef,
			0xd3, 0x94, 0x30, 0x50, 0x06, 0x7e, 0x00, 0x7f, 0x01, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00,
			0xef, 0x4e, 0x60, 0x07, 0xe4, 0xff, 0x12, 0x6d, 0xde, 0x80, 0x10, 0xe5, 0x17, 0x25, 0xe0,
			0x25, 0xe0, 0x24, 0x33, 0xfd, 0xe4, 0xfb, 0x7f, 0x63, 0x12, 0x00, 0x50, 0x03 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x55, 0x09, 0x9f, 0x3e, 0x7f, 0x00, 0x22, 0x90,
			0x36, 0xd4, 0xe0, 0x54, 0xf0, 0xff, 0xc3, 0x94, 0x20, 0x22, 0x90, 0x40, 0x00, 0xef, 0xf0,
			0xe4, 0xf5, 0x24, 0x90, 0x40, 0x00, 0xe0, 0x75, 0xf0, 0x13, 0xa4, 0xff, 0xe5, 0x24, 0xfb,
			0x7a, 0x00, 0x2f, 0xff, 0xea, 0x35, 0xf0, 0xfe, 0xef, 0x25, 0xe0, 0xff, 0xee, 0x33, 0xfe,
			0xd1, 0x9d, 0xe0, 0xfd, 0x75, 0xf0, 0x30, 0xa4, 0x24, 0x74, 0xf5, 0x82, 0xe5, 0xf0, 0x34,
			0x2d, 0xd1, 0x4f, 0xe4, 0x94, 0x00, 0xef, 0xfe, 0xeb, 0xff, 0x12, 0x01, 0xea, 0x05, 0x24,
			0xe5, 0x24, 0xd3, 0x94, 0x09, 0x40, 0xc0, 0xe4, 0xf5, 0x24, 0xe5, 0x24, 0x64, 0x01, 0x90,
			0x40, 0x00, 0x70, 0x0f, 0xd1, 0x1e, 0xd1, 0x13, 0xeb, 0xff, 0x7b, 0x87, 0x7a, 0xff, 0x12,
			0x00, 0x5c, 0x80, 0x09, 0xd1, 0x1e, 0xd1, 0x13, 0xeb, 0xff, 0x12, 0x01, 0xea, 0x05, 0x24, 
			0xe5, 0x24, 0xd3, 0x94, 0x08, 0x40, 0xd6, 0x90, 0x40, 0x00, 0xe0, 0xff, 0x7e, 0x00, 0xe5,
			0x17, 0x25, 0xe0, 0x25, 0xe0, 0xfb, 0xef, 0xc8, 0xeb, 0xc8, 0x08, 0x80, 0x05, 0xc3, 0x33,
			0xce, 0x33, 0xce, 0xd8, 0xf9, 0xfd, 0xcc, 0xee, 0xcc, 0x74, 0x0f, 0x7e, 0x00, 0xc8, 0xeb,
			0xc8, 0x08, 0x80, 0x05, 0xc3, 0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0xfb, 0xca, 0xee, 0xca,
			0x7f, 0x47, 0x7e, 0x63, 0x12, 0x00, 0x5c, 0x7f, 0x00, 0x22, 0xef, 0xfe, 0xeb, 0x24, 0x0f,
			0xfb, 0xea, 0x33, 0x4e, 0xfe, 0x22, 0xe0, 0x75, 0xf0, 0x13, 0xa4, 0xff, 0xe5, 0x24, 0xfb,
			0x7a, 0x00, 0x2f, 0xff, 0xea, 0x35, 0xf0, 0xfe, 0xef, 0x25, 0xe0, 0xff, 0xee, 0x33, 0xfe, 
			0x74, 0xc8, 0x25, 0x17, 0xf5, 0x82, 0xe4, 0x34, 0x36, 0xf5, 0x83, 0xe0, 0xfd, 0x75, 0xf0,
			0x30, 0xa4, 0x24, 0x88, 0xf5, 0x82, 0xe5, 0xf0, 0x34, 0x2d, 0xf5, 0x83, 0xed, 0x25, 0x83,
			0xf5, 0x83, 0xe5, 0x82, 0x2f, 0xf5, 0x82, 0xe5, 0x83, 0x3e, 0xf5, 0x83, 0xe0, 0xfc, 0xa3,
			0xe0, 0xfd, 0xc3, 0x74, 0x6c, 0x95, 0x18, 0xff, 0x22, 0xef, 0x60, 0x08, 0xd1, 0x65, 0xd1,
			0x92, 0x7c, 0x05, 0x80, 0x15, 0x74, 0xd5, 0x25, 0x17, 0xf5, 0x82, 0xe4, 0x34, 0x36, 0xf5, 
			0x83, 0xe0, 0xb4, 0xff, 0x09, 0xd1, 0x65, 0xd1, 0x92, 0x7c, 0x08, 0x12, 0x00, 0xa6, 0x7f, 
			0xff, 0x22, 0xe4, 0x94, 0x00, 0xef, 0xfe, 0x74, 0x0a, 0xff, 0x7d, 0x0f, 0x22, 0x74, 0xc8,
			0x25, 0x17, 0xf5, 0x82, 0xe4, 0x34, 0x36, 0xf5, 0x83, 0x22, 0x90, 0x40, 0x00, 0xed, 0xf0,
			0xc9, 0xef, 0xc9, 0xd1, 0x9d, 0xe0, 0x24, 0x70, 0xf5, 0x82, 0xe4, 0x34, 0x2d, 0xf5, 0x83,
			0xe0, 0x24, 0xfe, 0x69, 0x60, 0x02, 0xe1, 0x5a, 0xe5, 0x17, 0x7f, 0x00, 0xfe, 0xef, 0x24,
			0x34, 0xf5, 0x82, 0x74, 0x32, 0x3e, 0xaf, 0x82, 0xf5, 0x2b, 0x8f, 0x2c, 0xf5, 0x83, 0xf1,
			0x6f, 0xf5, 0x25, 0xe4, 0xf5, 0x2a, 0xe5, 0x2a, 0xd3, 0x99, 0x50, 0x3a, 0xf1, 0x5d, 0xc0,
			0x83, 0xc0, 0x82, 0xe5, 0x2a, 0x69, 0x70, 0x04, 0xaf, 0x2a, 0x80, 0x04, 0xe5, 0x2a, 0x04,
			0xff, 0xd0, 0x82, 0xd0, 0x83, 0x75, 0xf0, 0x04, 0xef, 0x71, 0xbc, 0xf1, 0x7a, 0xff, 0xe5,
			0x28, 0x3e, 0xfe, 0xf1, 0x5d, 0x75, 0xf0, 0x04, 0xe5, 0x2a, 0x71, 0xbc, 0xee, 0xf0, 0xa3,
			0xef, 0xf1, 0x64, 0x85, 0x29, 0x27, 0x05, 0x2a, 0x80, 0xc0, 0xf1, 0x5d, 0xa3, 0xa3, 0xf1, 
			0x6f, 0xf5, 0x25, 0xe4, 0xf5, 0x2a, 0xe5, 0x2a, 0xd3, 0x99, 0x50, 0x28, 0xe5, 0x2a, 0x69,
			0x70, 0x04, 0xaf, 0x2a, 0x80, 0x04, 0xe5, 0x2a, 0x04, 0xff, 0xef, 0xa7, 0xad });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x74, 0x09, 0x9f, 0xf1, 0x96, 0xf1, 0x7a, 0xfd,
			0xe5, 0x28, 0x3e, 0xfc, 0xe5, 0x2a, 0xf1, 0x96, 0xec, 0xf0, 0xa3, 0xed, 0xf1, 0x64, 0x85,
			0x29, 0x27, 0x05, 0x2a, 0x80, 0xd2, 0x7f, 0x00, 0x22, 0x85, 0x2c, 0x82, 0x85, 0x2b, 0x83,
			0x22, 0xf0, 0x85, 0x26, 0x24, 0x85, 0x27, 0x25, 0x85, 0x28, 0x26, 0x22, 0xe0, 0xfe, 0xa3,
			0xe0, 0x8e, 0x26, 0xf5, 0x27, 0x8e, 0x24, 0x22, 0xe0, 0xf5, 0x28, 0xa3, 0xe0, 0xf5, 0x29,
			0xe5, 0x27, 0x25, 0xe0, 0xff, 0xe5, 0x26, 0x33, 0xfe, 0xe5, 0x25, 0x2f, 0xff, 0xe5, 0x24,
			0x3e, 0xfe, 0xe5, 0x29, 0x2f, 0x22, 0x75, 0xf0, 0x02, 0xa4, 0x24, 0x01, 0xff, 0xe4, 0x35,
			0xf0, 0xfe, 0xef, 0x25, 0xe0, 0xff, 0xee, 0x33, 0xfe, 0xe5, 0x2c, 0x2f, 0xf5, 0x82, 0xe5,
			0x2b, 0x3e, 0xf5, 0x83, 0x22, 0xef, 0x70, 0x2b, 0xd1, 0x65, 0x7b, 0x01, 0x7d, 0x6f, 0x12,
			0x00, 0xf6, 0xef, 0x60, 0x1f, 0xe5, 0x18, 0x24, 0x23, 0xfd, 0x7b, 0x01, 0x7f, 0x05, 0x12,
			0x00, 0xf6, 0xef, 0x60, 0x10, 0xf1, 0xe7, 0xe4, 0x94, 0x00, 0xef, 0x7f, 0x00, 0xfe, 0x7d,
			0x01, 0x7c, 0x60, 0x12, 0x01, 0x75, 0x7f, 0xff, 0x22, 0xe0, 0xf5, 0xf8, 0xc3, 0x74, 0x6a,
			0x95, 0x18, 0xff, 0x22, 0xef, 0x64, 0x01, 0x60, 0x03, 0x02, 0x98, 0x95, 0x90, 0x00, 0x0e,
			0xe0, 0x30, 0xe7, 0x03, 0x02, 0x98, 0x95, 0x54, 0xfc, 0xf5, 0xf9, 0xe4, 0x12, 0x97, 0xe5,
			0x7d, 0x3f, 0x12, 0x00, 0x03, 0x90, 0x00, 0x29, 0xe0, 0xf5, 0xf9, 0x75, 0xf8, 0x03, 0x12,
			0x97, 0xe7, 0x7d, 0x92, 0x12, 0x00, 0x03, 0x90, 0x00, 0x2b, 0xe0, 0xf5, 0xf9, 0x90, 0x00,
			0x2a, 0x12, 0x97, 0xe4, 0x7d, 0x93, 0x12, 0x00, 0x03, 0x90, 0x00, 0x25, 0xe0, 0xf5, 0xf9,
			0x90, 0x00, 0x24, 0x12, 0x97, 0xe4, 0x7d, 0x94, 0x12, 0x00, 0x03, 0x90, 0x00, 0x27, 0xe0,
			0xf5, 0xf9, 0x90, 0x00, 0x26, 0x12, 0x97, 0xe4, 0x7d, 0x95, 0x12, 0x00, 0x03, 0x90, 0x00,
			0x21, 0xe0, 0xf5, 0xf9, 0x90, 0x00, 0x20, 0x12, 0x97, 0xe4, 0x7d, 0x96, 0x12, 0x00, 0x03,
			0x90, 0x00, 0x23, 0xe0, 0xf5, 0xf9, 0x90, 0x00, 0x22, 0x12, 0x97, 0xe4, 0x7d, 0x97, 0x12,
			0x00, 0x03, 0x90, 0x00, 0x1d, 0xe0, 0xf5, 0xf9, 0x90, 0x00, 0x1c, 0x12, 0x97, 0xe4, 0x7d,
			0x98, 0x12, 0x00, 0x03, 0x90, 0x00, 0x1f, 0xe0, 0xf5, 0xf9, 0x90, 0x00, 0x1e, 0x12, 0x97,
			0xe4, 0x7d, 0x99, 0x12, 0x00, 0x03, 0x7f, 0x00, 0x22, 0x90, 0x40, 0x00, 0xef, 0xf0, 0xaf,
			0x17, 0x74, 0x01, 0xc8, 0xef, 0xc8, 0x08, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0xfb, 0x7d,
			0x19, 0x7f, 0x07, 0x12, 0x00, 0xf6, 0xef, 0x70, 0x02, 0x61, 0xd4, 0x91, 0x4f, 0x7b, 0x40,
			0x7d, 0x04, 0x12, 0x01, 0x9c, 0x75, 0x25, 0x78, 0x75, 0x26, 0x78, 0x12, 0x96, 0x65, 0xe4,
			0x94, 0x00, 0xef, 0xfe, 0x74, 0x10, 0xff, 0xee, 0xc0, 0xe0, 0xef, 0xc0, 0xe0, 0xe5, 0x25,
			0xfc, 0x74, 0x78, 0xfd, 0xd0, 0xe0, 0xff, 0xd0, 0xe0, 0xfe, 0x12, 0x00, 0xa6, 0x12, 0x96,
			0x9d, 0x74, 0x03, 0xf0, 0x91, 0x22, 0x70, 0x02, 0xa3, 0xe0, 0x60, 0x0c, 0x90, 0x00, 0xd4,
			0x71, 0xda, 0x7f, 0x03, 0x12, 0x93, 0xcc, 0x8f, 0x16, 0xe5, 0x16, 0xb4, 0xff, 0x07, 0x7f,
			0x03, 0x12, 0x37, 0x66, 0x8f, 0x16, 0x90, 0x00, 0xd6, 0xe0, 0x70, 0x02, 0xa3, 0xe0, 0x60,
			0x09, 0x71, 0xd7, 0x7f, 0x03, 0x12, 0x93, 0xcc, 0x8f, 0x16, 0x7f, 0x04, 0x7e, 0x07, 0x12,
			0x01, 0xd6, 0x8e, 0x27, 0x8f, 0x28, 0x7f, 0x05, 0x7e, 0x07, 0x12, 0xcb, 0x40 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0x93, 0x09, 0x9f, 0x01, 0xd6, 0x8e, 0x29, 0x8f,
			0x2a, 0x7f, 0x06, 0x7e, 0x07, 0x12, 0x01, 0xd6, 0x8e, 0x2b, 0x8f, 0x2c, 0x7f, 0x00, 0x7e,
			0x07, 0x12, 0x01, 0xd6, 0x8e, 0x2d, 0x8f, 0x2e, 0x7f, 0x01, 0x7e, 0x07, 0x12, 0x01, 0xd6,
			0x8e, 0x2f, 0x8f, 0x30, 0x7f, 0x02, 0x7e, 0x07, 0x12, 0x01, 0xd6, 0x8e, 0x31, 0x8f, 0x32,
			0x7f, 0x03, 0x7e, 0x07, 0x12, 0x01, 0xd6, 0x8e, 0x33, 0x8f, 0x34, 0x7f, 0x60, 0x7e, 0x07,
			0x12, 0x01, 0xd6, 0x8e, 0x35, 0x8f, 0x36, 0x7f, 0x7b, 0x7e, 0x07, 0x12, 0x01, 0xd6, 0x8e,
			0x37, 0x8f, 0x38, 0x7b, 0x07, 0x7d, 0x7b, 0x7f, 0x07, 0x12, 0x00, 0x3e, 0x7b, 0x20, 0x7d,
			0x78, 0x7f, 0x07, 0x12, 0x01, 0x59, 0x7d, 0x08, 0x7c, 0xdc, 0x91, 0x1b, 0x7d, 0x7e, 0x7c,
			0x50, 0x91, 0x14, 0x7d, 0x03, 0x7c, 0x00, 0x91, 0x0d, 0xe4, 0xfd, 0xfc, 0xff, 0x7e, 0x07,
			0x12, 0x01, 0xea, 0x7d, 0x09, 0x7c, 0xee, 0x91, 0x06, 0x7d, 0x00, 0x7c, 0x0c, 0x71, 0xff, 
			0x7d, 0x03, 0x7f, 0x07, 0x12, 0x00, 0x13, 0x91, 0x3b, 0x91, 0x3b, 0xe4, 0xfd, 0xfc, 0x71, 
			0xf8, 0x12, 0x96, 0x65, 0x7b, 0x20, 0x7d, 0x33, 0x12, 0x01, 0x3d, 0x7f, 0x0a, 0x7e, 0x00,
			0x12, 0x02, 0x21, 0x74, 0xff, 0xf5, 0x40, 0xf5, 0x3f, 0xf5, 0x3e, 0x75, 0x3d, 0x7f, 0xe4, 
			0xf5, 0x3c, 0xf5, 0x3b, 0xf5, 0x3a, 0xf5, 0x39, 0xf5, 0x24, 0x7d, 0x5f, 0x7c, 0x07, 0x71,
			0xf1, 0x7d, 0x61, 0x7f, 0x07, 0x12, 0x00, 0x13, 0xe5, 0xf8, 0x30, 0xe0, 0xf4, 0xe5, 0xf9,
			0x54, 0x07, 0xfe, 0xe5, 0xf8, 0x54, 0xfe, 0xfd, 0xed, 0xff, 0xee, 0xc3, 0x13, 0xfe, 0xef, 
			0x13, 0xff, 0x7c, 0x00, 0x7d, 0xc6, 0x12, 0x93, 0xce, 0xe5, 0x3c, 0x2f, 0xf5, 0x3c, 0xe5, 
			0x3b, 0x3e, 0xf5, 0x3b, 0xe5, 0x3a, 0x3d, 0xf5, 0x3a, 0xe5, 0x39, 0x3c, 0xf5, 0x39, 0x05, 
			0x24, 0xe5, 0x24, 0xc3, 0x94, 0x04, 0x40, 0xb7, 0xc3, 0xe5, 0x3c, 0x94, 0xf8, 0xf5, 0x3c,
			0xe5, 0x3b, 0x94, 0x1d, 0xf5, 0x3b, 0xe5, 0x3a, 0x94, 0x08, 0xf5, 0x3a, 0xe5, 0x39, 0x94,
			0x00, 0xf5, 0x39, 0xaf, 0x40, 0xae, 0x3f, 0xad, 0x3e, 0xac, 0x3d, 0x12, 0x94, 0xfc, 0xec, 
			0xc0, 0xe0, 0xed, 0xc0, 0xe0, 0xee, 0xc0, 0xe0, 0xef, 0xc0, 0xe0, 0x91, 0x32, 0x12, 0x94, 
			0xfc, 0xc8, 0xec, 0xc8, 0xc9, 0xed, 0xc9, 0xca, 0xee, 0xca, 0xcb, 0xef, 0xcb, 0xd0, 0xe0,
			0xff, 0xd0, 0xe0, 0xfe, 0xd0, 0xe0, 0xfd, 0xd0, 0xe0, 0xfc, 0xc3, 0x12, 0x93, 0xa6, 0x40, 
			0x19, 0x71, 0xe3, 0xd3, 0x12, 0x93, 0xa6, 0x40, 0x74, 0x91, 0x32, 0xec, 0x33, 0x50, 0x6e,
			0x12, 0x94, 0xfc, 0x71, 0xe8, 0xc3, 0x12, 0x93, 0xa6, 0x70, 0x63, 0x85, 0x25, 0x26, 0xe4,
			0xff, 0xfe, 0xfd, 0xfc, 0xab, 0x3c, 0xaa, 0x3b, 0xa9, 0x3a, 0xa8, 0x39, 0xd3, 0x12, 0x93,
			0xa6, 0x40, 0x1d, 0x71, 0xe3, 0xd3, 0x12, 0x93, 0xa6, 0x50, 0x0a, 0x91, 0x2a, 0xa8, 0x3d,
			0xc3, 0x12, 0x93, 0xa6, 0x70, 0x0b, 0xe5, 0x25, 0xc3, 0x94, 0x78, 0x50, 0x04, 0x74, 0x08,
			0x80, 0x1e, 0xac, 0x39, 0xec, 0x33, 0x50, 0x1c, 0xac, 0x3d, 0xec, 0x33, 0x40, 0x09, 0x91,
			0x2a, 0x71, 0xe8, 0x12, 0x93, 0xa6, 0x70, 0x0d, 0xe5, 0x25, 0xd3, 0x94, 0x00, 0x40, 0x06,
			0x74, 0xf8, 0x25, 0x25, 0xf5, 0x25, 0x85, 0x3c, 0x40, 0x85, 0x3b, 0x3f, 0x85, 0x3a, 0x3e, 
			0x85, 0x39, 0x3d, 0x80, 0x03, 0x85, 0x26, 0x25, 0x12, 0x96, 0x65, 0xef, 0xfe, 0x74, 0x10, 
			0xff, 0xee, 0xc0, 0xe0, 0xef, 0xc0, 0xe0, 0xe5, 0x25, 0xd3, 0x94, 0x76, 0x20 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xb2, 0x09, 0x9f, 0x10, 0x40, 0x07, 0xe5, 0x25,
			0x24, 0xf0, 0xff, 0x80, 0x02, 0x7f, 0x00, 0xef, 0xfc, 0x74, 0x78, 0xfd, 0xd0, 0xe0, 0xff,
			0xd0, 0xe0, 0xfe, 0x12, 0x00, 0xa6, 0xe5, 0x26, 0x65, 0x25, 0x60, 0x09, 0x7f, 0x64, 0x7e,
			0x00, 0x12, 0x02, 0x21, 0x21, 0xe8, 0x7b, 0x20, 0x7d, 0x78, 0x7f, 0x07, 0x12, 0x01, 0xb9,
			0x12, 0x96, 0x65, 0x7b, 0x20, 0x7d, 0x33, 0x12, 0x01, 0x9c, 0xad, 0x28, 0xac, 0x27, 0x91,
			0x1b, 0xad, 0x2a, 0xac, 0x29, 0x91, 0x14, 0xad, 0x2c, 0xac, 0x2b, 0x91, 0x0d, 0xad, 0x2e,
			0xac, 0x2d, 0x7f, 0x00, 0x7e, 0x07, 0x12, 0x01, 0xea, 0xad, 0x30, 0xac, 0x2f, 0x91, 0x06,
			0xad, 0x32, 0xac, 0x31, 0x71, 0xff, 0xad, 0x34, 0xac, 0x33, 0x71, 0xf8, 0xad, 0x36, 0xac,
			0x35, 0x71, 0xf1, 0xad, 0x38, 0xac, 0x37, 0x7f, 0x7b, 0x7e, 0x07, 0x12, 0x01, 0xea, 0x91,
			0x22, 0x70, 0x02, 0xa3, 0xe0, 0x60, 0x0c, 0x90, 0x00, 0xd4, 0x71, 0xda, 0xe4, 0xff, 0x12,
			0x93, 0xcc, 0x8f, 0x16, 0xe5, 0x16, 0xb4, 0xff, 0x07, 0xe4, 0xff, 0x12, 0x37, 0x66, 0x8f,
			0x16, 0x90, 0x00, 0xd6, 0xe0, 0x70, 0x02, 0xa3, 0xe0, 0x60, 0x09, 0x71, 0xd7, 0xe4, 0xff,
			0x12, 0x93, 0xcc, 0x8f, 0x16, 0x12, 0x96, 0x9d, 0xe4, 0xf0, 0x7f, 0x00, 0x22, 0x90, 0x00,
			0xd6, 0xe0, 0xfe, 0xa3, 0xe0, 0xf5, 0x82, 0x8e, 0x83, 0x22, 0xe4, 0xff, 0xfe, 0xfd, 0xfc,
			0xab, 0x40, 0xaa, 0x3f, 0xa9, 0x3e, 0xa8, 0x3d, 0x22, 0x7f, 0x60, 0x7e, 0x07, 0x02, 0x01,
			0xea, 0x7f, 0x03, 0x7e, 0x07, 0x02, 0x01, 0xea, 0x7f, 0x02, 0x7e, 0x07, 0x02, 0x01, 0xea,
			0x7f, 0x01, 0x7e, 0x07, 0x02, 0x01, 0xea, 0x7f, 0x06, 0x7e, 0x07, 0x02, 0x01, 0xea, 0x7f,
			0x05, 0x7e, 0x07, 0x02, 0x01, 0xea, 0x7f, 0x04, 0x7e, 0x07, 0x02, 0x01, 0xea, 0x75, 0x16,
			0xff, 0x90, 0x00, 0xd4, 0xe0, 0x22, 0x74, 0xff, 0xff, 0xfe, 0xfd, 0x7c, 0x7f, 0x22, 0xaf,
			0x3c, 0xae, 0x3b, 0xad, 0x3a, 0xac, 0x39, 0x22, 0x43, 0xf9, 0x04, 0x7d, 0x03, 0x7f, 0x07,
			0x12, 0x00, 0x03, 0x53, 0xf9, 0xfb, 0x7d, 0x03, 0x7f, 0x07, 0x02, 0x00, 0x03, 0xc3, 0x74,
			0x69, 0x95, 0x18, 0xff, 0x22, 0xef, 0x70, 0x2b, 0xa8, 0x1d, 0xe6, 0x64, 0x10, 0x70, 0x24,
			0x91, 0x4f, 0x7b, 0x04, 0x7d, 0x50, 0x12, 0x00, 0xf6, 0xef, 0x60, 0x04, 0x7f, 0xff, 0x80,
			0x02, 0x7f, 0x00, 0xef, 0xfc, 0x74, 0x40, 0xfd, 0x91, 0x4f, 0xe4, 0x94, 0x00, 0xef, 0xfe,
			0x74, 0x04, 0xff, 0x12, 0x00, 0xa6, 0x7f, 0x00, 0x22, 0x7b, 0x02, 0x7d, 0xf6, 0xe4, 0xff,
			0x12, 0x01, 0x59, 0x7f, 0x00, 0x22, 0x7d, 0x00, 0x7c, 0x01, 0x7f, 0x05, 0x7e, 0x63, 0x12,
			0x01, 0xea, 0x30, 0x0f, 0x03, 0x02, 0xa1, 0x3a, 0x90, 0x00, 0xdc, 0x74, 0x95, 0xf0, 0xa3,
			0x74, 0x04, 0xf0, 0x90, 0x00, 0xd4, 0x74, 0x95, 0xf0, 0xa3, 0x74, 0x5f, 0xf0, 0x90, 0x00,
			0xda, 0x74, 0x96, 0xf0, 0xa3, 0x74, 0xa9, 0xf0, 0x90, 0x00, 0xce, 0x74, 0x97, 0xf0, 0xa3,
			0x74, 0xee, 0xf0, 0x90, 0x00, 0x8a, 0x74, 0x98, 0xf0, 0xa3, 0x74, 0x98, 0xf0, 0x90, 0x00,
			0x92, 0x74, 0x9c, 0xf0, 0xa3, 0x74, 0x56, 0xf0, 0x90, 0x00, 0x9c, 0x74, 0x96, 0xf0, 0xa3,
			0x74, 0x6c, 0xf0, 0x90, 0x00, 0x94, 0x74, 0x97, 0xf0, 0xa3, 0x74, 0xb3, 0xf0, 0x90, 0x00,
			0xba, 0x74, 0x9c, 0xf0, 0xa3, 0x74, 0x87, 0xf0, 0x78, 0x74, 0x7c, 0x2d, 0x7d, 0x01, 0x7b,
			0xff, 0x7a, 0x8f, 0x79, 0x7e, 0x7e, 0x00, 0x7f, 0x98, 0x12, 0x94, 0xf0, 0xd2 });

			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xd1, 0x09, 0x9f, 0xb7, 0x90, 0x2d, 0x70, 0x74,
			0x04, 0xf0, 0x78, 0xa4, 0x7c, 0x2e, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x90, 0x79, 0x16, 0x7e,
			0x01, 0x7f, 0x30, 0x12, 0x94, 0xb7, 0x90, 0x2d, 0x71, 0x74, 0x08, 0xf0, 0x78, 0xd4, 0x7c,
			0x2f, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x91, 0x79, 0x46, 0x7e, 0x01, 0x7f, 0x30, 0x12, 0x94,
			0xb7, 0x90, 0x2d, 0x72, 0x74, 0x08, 0xf0, 0x78, 0x04, 0x7c, 0x31, 0x7d, 0x01, 0x7b, 0xff,
			0x7a, 0x92, 0x79, 0x76, 0x7e, 0x01, 0x7f, 0x30, 0x12, 0x94, 0xb7, 0x90, 0x2d, 0x73, 0x74,
			0x08, 0xf0, 0x7a, 0x01, 0x79, 0x40, 0x7e, 0x01, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce,
			0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x02, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0,
			0x78, 0x40, 0x7c, 0x01, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x80, 0x79, 0x1e, 0x7e, 0x00, 0x7f,
			0x4c, 0x12, 0x94, 0xb7, 0x7a, 0x02, 0x79, 0x40, 0x7e, 0x02, 0x7f, 0x40, 0x74, 0x40, 0x78,
			0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x04, 0x3e, 0xee, 0xf0, 0xa3,
			0xef, 0xf0, 0x78, 0x40, 0x7c, 0x02, 0x12, 0xa1, 0x65, 0x7f, 0xb4, 0x12, 0x94, 0xb7, 0x7a,
			0x07, 0x79, 0x40, 0x7e, 0x07, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce,
			0x13, 0xd8, 0xf9, 0xff, 0x90, 0x08, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c,
			0x07, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x87, 0x79, 0x1a, 0x7e, 0x00, 0x7f, 0xac, 0x12, 0x94,
			0xb7, 0x7a, 0x08, 0x79, 0x40, 0x7e, 0x08, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 0xc3,
			0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x09, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78,
			0x40, 0x7c, 0x08, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x87, 0x79, 0xc6, 0x7e, 0x00, 0x7f, 0xac,
			0x12, 0x94, 0xb7, 0x7a, 0x09, 0x79, 0x40, 0x7e, 0x09, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02,
			0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x0a, 0x3e, 0xee, 0xf0, 0xa3, 0xef,
			0xf0, 0x78, 0x40, 0x7c, 0x09, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x88, 0x79, 0x72, 0x7e, 0x00,
			0x7f, 0xac, 0x12, 0x94, 0xb7, 0x7a, 0x0a, 0x79, 0x40, 0x7e, 0x0a, 0x7f, 0x40, 0x74, 0x40,
			0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x0b, 0x3e, 0xee, 0xf0,
			0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x0a, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x89, 0x79, 0x1e,
			0x7e, 0x00, 0x7f, 0xac, 0x12, 0x94, 0xb7, 0x7a, 0x0b, 0x79, 0x40, 0x7e, 0x0b, 0x7f, 0x40,
			0x74, 0x40, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x0d, 0x3e,
			0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x0b, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x89,
			0x79, 0xca, 0x12, 0xa1, 0x77, 0x7a, 0x0d, 0x79, 0x40, 0x7e, 0x0d, 0x7f, 0x40, 0x74, 0x40,
			0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x0f, 0x3e, 0xee, 0xf0,
			0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x0d, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x8a, 0x79, 0xd2,
			0x12, 0xa1, 0x77, 0x7a, 0x0f, 0x79, 0x40, 0x7e, 0x0f, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02,
			0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x11, 0x3e, 0xee, 0xf0, 0xa3, 0xef,
			0xf0, 0x78, 0x40, 0x7c, 0x0f, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x8b, 0x79, 0xda, 0x12, 0xa1,
			0x70, 0x7a, 0x11, 0x79, 0x40, 0x7e, 0x11, 0x7f, 0x40, 0x74, 0x40, 0xba, 0x9b });
			
			data.push_back({ 0x5c, 0x1f, 0x86, 0x00, 0xf0, 0x09, 0x9f, 0x78, 0x02, 0xce, 0xc3, 0x13,
			0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x13, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40,
			0x7c, 0x11, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x8d, 0x79, 0x5e, 0x12, 0xa1, 0x70, 0x7a, 0x13,
			0x79, 0x40, 0x7e, 0x13, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13,
			0xd8, 0xf9, 0xff, 0x90, 0x15, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x13,
			0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x82, 0x79, 0x1e, 0x7e, 0x01, 0x7f, 0x34, 0x12, 0x94, 0xb7,
			0x7a, 0x15, 0x79, 0x40, 0x7e, 0x15, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 0xc3, 0x13,
			0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x17, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40,
			0x7c, 0x15, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x83, 0x79, 0x52, 0x7e, 0x01, 0x7f, 0x34, 0x12, 
			0x94, 0xb7, 0x7a, 0x17, 0x79, 0x40, 0x7e, 0x17, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 
			0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x19, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 
			0x78, 0x40, 0x7c, 0x17, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x84, 0x79, 0x86, 0x7e, 0x01, 0x7f, 
			0x34, 0x12, 0x94, 0xb7, 0x7a, 0x19, 0x79, 0x40, 0x7e, 0x19, 0x7f, 0x40, 0x74, 0x40, 0x78,
			0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x1b, 0x3e, 0xee, 0xf0, 0xa3,
			0xef, 0xf0, 0x78, 0x40, 0x7c, 0x19, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x85, 0x79, 0xba, 0x7e,
			0x01, 0x7f, 0x34, 0x12, 0x94, 0xb7, 0x7a, 0x1b, 0x79, 0x40, 0x7e, 0x1b, 0x7f, 0x40, 0x74,
			0x40, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x1c, 0x3e, 0xee,
			0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x1b, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x86, 0x79,
			0xee, 0x7e, 0x00, 0x7f, 0x2c, 0x12, 0x94, 0xb7, 0x7a, 0x1c, 0x79, 0x40, 0x7e, 0x1c, 0x7f,
			0x40, 0x74, 0x40, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x1e, 
			0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 0x78, 0x40, 0x7c, 0x1c, 0x31, 0x65, 0x7f, 0xb4, 0x12, 
			0x94, 0xb7, 0x7a, 0x24, 0x79, 0x40, 0x7e, 0x24, 0x7f, 0x40, 0x74, 0x40, 0x78, 0x02, 0xce,
			0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff, 0x90, 0x25, 0x3e, 0xee, 0xf0, 0xa3, 0xef, 0xf0, 
			0x78, 0x40, 0x7c, 0x24, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x8e, 0x79, 0xe2, 0x7e, 0x00, 0x7f,
			0x9c, 0x12, 0x94, 0xb7, 0x90, 0x00, 0x0d, 0x74, 0x05, 0xf0, 0x90, 0x00, 0x08, 0x74, 0x17,
			0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0x90, 0x00, 0x0e, 0xe0, 0x44, 0x40, 0xf0, 0x7f, 
			0x04, 0x31, 0x5a, 0xc0, 0xe0, 0xee, 0xc0, 0xe0, 0x7f, 0x04, 0x31, 0x52, 0xd0, 0xe0, 0xfc,
			0xd0, 0xe0, 0x4d, 0xfd, 0xec, 0xc0, 0xe0, 0xed, 0xc0, 0xe0, 0x7f, 0x05, 0x31, 0x5a, 0xc0, 
			0xe0, 0xee, 0xc0, 0xe0, 0x7f, 0x05, 0x31, 0x52, 0xd0, 0xe0, 0xfa, 0xd0, 0xe0, 0x4d, 0xfb,
			0x7e, 0x80, 0x7f, 0x03, 0xd0, 0xe0, 0xfd, 0xd0, 0xe0, 0xfc, 0x12, 0x02, 0xed, 0x90, 0x00,
			0x0e, 0xe0, 0x30, 0xe7, 0x7d, 0x90, 0x00, 0x27, 0x74, 0x6b, 0xf0, 0x90, 0x00, 0x26, 0x74,
			0x06, 0xf0, 0x90, 0x00, 0x25, 0x74, 0x98, 0xf0, 0xe4, 0x90, 0x00, 0x24, 0xf0, 0x90, 0x00,
			0x2b, 0x74, 0x6b, 0xf0, 0x90, 0x00, 0x2a, 0x74, 0x09, 0xf0, 0x90, 0x00, 0x29, 0x74, 0x46,
			0xf0, 0x90, 0x00, 0x28, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x2f, 0x74, 0x88, 0xfd });

			data.push_back({ 0x3c, 0x0a, 0x86, 0x00, 0x0f, 0x0a, 0x89, 0x6b, 0xf0, 0x90, 0x00, 0x2e,
			0x74, 0x10, 0xf0, 0x90, 0x00, 0x2d, 0x74, 0x87, 0xf0, 0x90, 0x00, 0x2c, 0x74, 0x4e, 0xf0,
			0x90, 0x00, 0x1f, 0x74, 0x06, 0xf0, 0x90, 0x00, 0x1e, 0x74, 0x0c, 0xf0, 0x90, 0x00, 0x1d,
			0x74, 0xec, 0xf0, 0x90, 0x00, 0x1c, 0x74, 0x40, 0xf0, 0x90, 0x00, 0x23, 0x74, 0x06, 0xf0,
			0x90, 0x00, 0x22, 0x74, 0x12, 0xf0, 0x90, 0x00, 0x21, 0x74, 0x03, 0xf0, 0xe4, 0x90, 0x00,
			0x20, 0xf0, 0x90, 0x00, 0x0f, 0xe0, 0x44, 0x02, 0xf0, 0x7b, 0xc0, 0x7a, 0x06, 0x7d, 0x7f,
			0x7c, 0xff, 0x7f, 0xf6, 0x7e, 0x00, 0x12, 0x00, 0x5c, 0x7b, 0x02, 0x7d, 0xf4, 0xe4, 0xff,
			0x02, 0x01, 0xb9, 0x7e, 0x63, 0x12, 0x01, 0xd6, 0xee, 0xfd, 0x22, 0x7e, 0x63, 0x12, 0x01,
			0xd6, 0xef, 0x7f, 0x00, 0xfe, 0xef, 0x22, 0x7d, 0x01, 0x7b, 0xff, 0x7a, 0x80, 0x79, 0x6a,
			0x7e, 0x01, 0x22, 0x7e, 0x01, 0x7f, 0x84, 0x02, 0x94, 0xb7, 0x7e, 0x01, 0x7f, 0x08, 0x02,
			0x94, 0xb7, 0x00, 0x00, 0x08, 0x00, 0x3d, 0xff, 0xff, 0x00, 0x02, 0x15, 0x00, 0x3d, 0x00,
			0x00, 0x00, 0x02, 0x0e, 0x00 });

			data.push_back({ 0x5c, 0x1b, 0x08, 0x40, 0x04, 0x00, 0x00, 0x20, 0x00, 0x0d, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x40, 0x04, 0xff, 0xff, 0x20, 0x00, 0x48, 0xd1, 0x3f, 0x00, 0x00, 0x03,
			0x00, 0x08, 0xc0, 0x3d, 0xff, 0xff, 0x00, 0x80, 0x48, 0x51, 0x19, 0x00, 0x00, 0x1f, 0x00,
			0x48, 0x51, 0x19, 0x00, 0x00, 0xe0, 0x03, 0x48, 0x91, 0x19, 0x00, 0x00, 0x1f, 0x00, 0x48,
			0x91, 0x19, 0x00, 0x00, 0xe0, 0x03, 0x48, 0x91, 0x1a, 0xff, 0xff, 0x01, 0x00, 0x48, 0x91,
			0x1a, 0xff, 0xff, 0x02, 0x00, 0x48, 0x91, 0x1a, 0xff, 0xff, 0x04, 0x00, 0x48, 0x91, 0x1a,
			0xff, 0xff, 0x08, 0x00, 0x48, 0xd1, 0x1a, 0xff, 0xff, 0x01, 0x00, 0x48, 0xd1, 0x1a, 0xff,
			0xff, 0x00, 0x02, 0x48, 0xd1, 0x1a, 0xff, 0xff, 0x00, 0x04, 0x48, 0xd1, 0x1a, 0xff, 0xff,
			0x00, 0x08, 0x48, 0xd1, 0x1a, 0xff, 0xff, 0x00, 0x10, 0x48, 0x91, 0x1b, 0x01, 0x00, 0x03,
			0x00, 0x48, 0x91, 0x1b, 0x04, 0x00, 0x0c, 0x00, 0x48, 0x91, 0x1b, 0x10, 0x00, 0x30, 0x00,
			0x48, 0x91, 0x1b, 0x40, 0x00, 0xc0, 0x00, 0x48, 0x91, 0x1c, 0x01, 0x00, 0x0f, 0x00, 0x48,
			0x91, 0x1c, 0x20, 0x00, 0xf0, 0x00, 0x48, 0x91, 0x1c, 0x00, 0x03, 0x00, 0x0f, 0x48, 0x91,
			0x1c, 0x00, 0x40, 0x00, 0xf0, 0x48, 0xd1, 0x1d, 0xff, 0xff, 0x00, 0x10, 0x48, 0xd1, 0x1d,
			0xff, 0xff, 0x00, 0x20, 0x48, 0xd1, 0x1d, 0xff, 0xff, 0x00, 0x40, 0x48, 0xd1, 0x1d, 0xff,
			0xff, 0x00, 0x80, 0x48, 0x51, 0x1e, 0x01, 0x00, 0x0f, 0x00, 0x48, 0x51, 0x1e, 0x20, 0x00,
			0xf0, 0x00, 0x48, 0x51, 0x1e, 0x00, 0x03, 0x00, 0x0f, 0x48, 0x51, 0x1e, 0x00, 0x40, 0x00,
			0xf0, 0x48, 0x11, 0x00, 0xff, 0xff, 0x5f, 0x00, 0x48, 0x11, 0x20, 0x04, 0x00, 0x1f, 0x00,
			0x48, 0x11, 0x20, 0x60, 0x00, 0xe0, 0x03, 0x48, 0x51, 0x20, 0x02, 0x00, 0x1f, 0x00, 0x48,
			0x51, 0x20, 0x20, 0x00, 0xe0, 0x03, 0x40, 0x11, 0x21, 0x80, 0x01, 0x40, 0x51, 0x21, 0x80,
			0x01, 0x40, 0x91, 0x21, 0x80, 0x01, 0x40, 0xd1, 0x21, 0x80, 0x01, 0x48, 0x11, 0x23, 0xff,
			0xff, 0x01, 0x00, 0x48, 0x11, 0x23, 0xff, 0xff, 0x02, 0x00, 0x48, 0x11, 0x23, 0xff, 0xff,
			0x04, 0x00, 0x48, 0x11, 0x23, 0xff, 0xff, 0x08, 0x00, 0x40, 0x91, 0x23, 0x00, 0x00, 0x40,
			0xd1, 0x23, 0x00, 0x00, 0x40, 0x11, 0x24, 0x00, 0x00, 0x40, 0x51, 0x24, 0x00, 0x00, 0x48,
			0x11, 0x00, 0xff, 0xff, 0x1f, 0x02, 0x08, 0x00, 0x36, 0x23, 0x01, 0xff, 0xff, 0x08, 0x40,
			0x36, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc0, 0x35, 0xff, 0xff, 0x40, 0x00, 0x08, 0xc0, 0x35,
			0xff, 0xff, 0x20, 0x00, 0x08, 0x80, 0x37, 0x35, 0xb7, 0xff, 0xff, 0x08, 0xc0, 0x37, 0x0c,
			0x00, 0xff, 0xff, 0x08, 0xc0, 0x36, 0xff, 0xff, 0x20, 0x00, 0x08, 0xc0, 0x36, 0xff, 0xff,
			0x01, 0x00, 0x08, 0xc0, 0x36, 0xff, 0xff, 0x02, 0x00, 0x08, 0xc0, 0x36, 0xff, 0xff, 0x04,
			0x00, 0x08, 0xc0, 0x36, 0xff, 0xff, 0x08, 0x00, 0x08, 0xc0, 0x36, 0xff, 0xff, 0x10, 0x00,
			0x08, 0xc0, 0x35, 0x0f, 0x00, 0x0f, 0x00, 0xab, 0x25 });

			data.push_back({ 0x62, 0x00, 0x02, 0x01, 0x00, 0x03, 0x00, 0xc0, 0xea });
			
			data.push_back({ 0x6c, 0x04, 0x08, 0x00, 0x26, 0xff, 0xff, 0x01, 0x00, 0x08, 0x98, 0xc6,
			0xff, 0xff, 0x08, 0x00, 0x08, 0x58, 0x24, 0xff, 0xff, 0x01, 0x00, 0x08, 0xd8, 0x24, 0x01,
			0x00, 0x3f, 0x00, 0x08, 0xd8, 0x24, 0x00, 0x05, 0x00, 0x1f, 0x08, 0x58, 0x1c, 0xff, 0xff,
			0x00, 0x20, 0x08, 0x18, 0x01, 0x05, 0x00, 0x3f, 0x00, 0x08, 0x58, 0x1c, 0x00, 0x00, 0x00,
			0x20, 0x08, 0x18, 0x04, 0x10, 0x32, 0xff, 0xff, 0x08, 0x58, 0x04, 0x04, 0x00, 0xff, 0xff,
			0xc9, 0xc5 });

			data.push_back({ 0x8c, 0x1f, 0xc0, 0x01, 0x07, 0x00, 0x00, 0xc0, 0x41, 0x07, 0x00, 0x00,
			0xc0, 0x81, 0x07, 0x00, 0x00, 0xc0, 0xc1, 0x07, 0x00, 0x00, 0x08, 0xc0, 0x04, 0x00, 0x00,
			0x08, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc0, 0x04, 0xff, 0xff, 0x08, 0x00, 0xc0,
			0x1f, 0x00, 0xc5, 0x63, 0xc0, 0x5f, 0x00, 0x01, 0x00, 0xc0, 0x9f, 0x00, 0x20, 0xc5, 0xc0,
			0xdf, 0x00, 0xc5, 0x63, 0xc0, 0x1f, 0x01, 0x01, 0x00, 0xc0, 0x5f, 0x01, 0x20, 0xc5, 0xc0,
			0x9f, 0x01, 0xc7, 0x63, 0xc0, 0xdf, 0x01, 0x01, 0x00, 0xc0, 0x1f, 0x02, 0x20, 0xc5, 0xc0,
			0x5f, 0x02, 0xc7, 0x63, 0xc0, 0x9f, 0x02, 0x01, 0x00, 0xc0, 0xdf, 0x02, 0x20, 0xc5, 0xc0,
			0x1f, 0x03, 0xc5, 0x63, 0xc0, 0x5f, 0x03, 0x01, 0x00, 0xc0, 0x9f, 0x03, 0x20, 0xc5, 0xc0,
			0xdf, 0x03, 0xc5, 0x63, 0xc0, 0x1f, 0x04, 0x01, 0x00, 0xc0, 0x5f, 0x04, 0x20, 0xc5, 0xc0,
			0x9f, 0x04, 0xc5, 0x63, 0xc0, 0xdf, 0x04, 0x01, 0x00, 0xc0, 0x1f, 0x05, 0x20, 0xc5, 0xc0,
			0x5f, 0x05, 0xc5, 0x63, 0xc0, 0x9f, 0x05, 0x01, 0x00, 0xc0, 0xdf, 0x05, 0x20, 0xc5, 0xc0,
			0x1f, 0x06, 0xc7, 0x63, 0xc0, 0x5f, 0x06, 0x01, 0x00, 0xc0, 0x9f, 0x06, 0x20, 0xc5, 0xc0,
			0xdf, 0x06, 0xc7, 0x63, 0xc0, 0x1f, 0x07, 0x01, 0x00, 0xc0, 0x5f, 0x07, 0x20, 0xc5, 0xc0,
			0x9f, 0x07, 0xc5, 0x63, 0xc0, 0xdf, 0x07, 0x01, 0x00, 0xc0, 0x1f, 0x08, 0x20, 0xc5, 0xc0,
			0x5f, 0x08, 0xc5, 0x63, 0xc0, 0x9f, 0x08, 0x01, 0x00, 0xc0, 0xdf, 0x08, 0x20, 0xc5, 0xc0,
			0x1f, 0x09, 0x60, 0xc1, 0xc0, 0x5f, 0x09, 0x60, 0x01, 0xc0, 0x1f, 0x0b, 0x01, 0x00, 0xc0,
			0x9f, 0x09, 0x07, 0x00, 0xc0, 0xdf, 0x09, 0x07, 0x00, 0xc0, 0x1f, 0x0a, 0x07, 0x00, 0xc0,
			0x5f, 0x0a, 0x07, 0x00, 0xc0, 0x9f, 0x0a, 0x07, 0x00, 0xc0, 0xdf, 0x0a, 0x07, 0x00, 0x00,
			0x80, 0x20, 0xbf, 0x0e, 0x00, 0xc0, 0x20, 0x03, 0x00, 0xc0, 0x1f, 0x0e, 0x88, 0x9c, 0xc0,
			0x5f, 0x0e, 0x0c, 0x00, 0xc0, 0x1f, 0x10, 0xe0, 0x80, 0xc0, 0x5f, 0x10, 0x41, 0x40, 0xc0,
			0x9f, 0x10, 0x60, 0x80, 0xc8, 0x1f, 0x14, 0xff, 0xff, 0x01, 0x00, 0xc8, 0x1f, 0x14, 0xff,
			0xff, 0x02, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0xc8, 0x1f,
			0x14, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x64, 0x00, 0x00, 0x00,
			0xc0, 0x9f, 0x11, 0x00, 0x00, 0xc0, 0xdf, 0x11, 0x00, 0x00, 0xc0, 0x01, 0x07, 0x00, 0x00,
			0xc0, 0x41, 0x07, 0x00, 0x00, 0xc0, 0x81, 0x07, 0x00, 0x00, 0xc0, 0xc1, 0x07, 0x00, 0x00,
			0x08, 0x00, 0x06, 0x00, 0x00, 0x08, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x06,
			0xff, 0xff, 0x08, 0x00, 0xc0, 0x0f, 0x00, 0xc5, 0x63, 0xc0, 0x4f, 0x00, 0x01, 0x00, 0xc0,
			0x8f, 0x00, 0x20, 0xc5, 0xc0, 0xcf, 0x00, 0xc5, 0x63, 0xc0, 0x0f, 0x01, 0x01, 0x00, 0xc0,
			0x4f, 0x01, 0x20, 0xc5, 0xc0, 0x8f, 0x01, 0xc7, 0x63, 0xc0, 0xcf, 0x01, 0x01, 0x00, 0xc0,
			0x0f, 0x02, 0x20, 0xc5, 0xc0, 0x4f, 0x02, 0xc7, 0x63, 0xc0, 0x8f, 0x02, 0x01, 0x00, 0xc0,
			0xcf, 0x02, 0x20, 0xc5, 0xc0, 0x0f, 0x03, 0xc5, 0x63, 0xc0, 0x4f, 0x03, 0x01, 0x00, 0xc0,
			0x8f, 0x03, 0x20, 0xc5, 0xc0, 0xcf, 0x03, 0xc5, 0x63, 0xc0, 0x0f, 0x04, 0x01, 0x00, 0xc0,
			0x4f, 0x04, 0x20, 0xc5, 0xc0, 0x8f, 0x04, 0xc5, 0x63, 0xc0, 0xcf, 0x04, 0x01, 0x00, 0xc0,
			0x0f, 0x05, 0x20, 0xc5, 0xc0, 0x4f, 0x05, 0xc5, 0x63, 0xc0, 0x8f, 0x05, 0x01, 0x00, 0x26,
			0x1d });

			data.push_back({ 0x4c, 0x0c, 0xc0, 0xcf, 0x05, 0x20, 0xc5, 0xc0, 0x0f, 0x06, 0xc7, 0x63,
			0xc0, 0x4f, 0x06, 0x01, 0x00, 0xc0, 0x8f, 0x06, 0x20, 0xc5, 0xc0, 0xcf, 0x06, 0xc7, 0x63,
			0xc0, 0x0f, 0x07, 0x01, 0x00, 0xc0, 0x4f, 0x07, 0x20, 0xc5, 0xc0, 0x8f, 0x07, 0xc5, 0x63,
			0xc0, 0xcf, 0x07, 0x01, 0x00, 0xc0, 0x0f, 0x08, 0x20, 0xc5, 0xc0, 0x4f, 0x08, 0xc5, 0x63,
			0xc0, 0x8f, 0x08, 0x01, 0x00, 0xc0, 0xcf, 0x08, 0x20, 0xc5, 0xc0, 0x0f, 0x09, 0x60, 0xc1,
			0xc0, 0x4f, 0x09, 0x60, 0x01, 0xc0, 0x0f, 0x0b, 0x01, 0x00, 0xc0, 0x8f, 0x09, 0x07, 0x00,
			0xc0, 0xcf, 0x09, 0x07, 0x00, 0xc0, 0x0f, 0x0a, 0x07, 0x00, 0xc0, 0x4f, 0x0a, 0x07, 0x00,
			0xc0, 0x8f, 0x0a, 0x07, 0x00, 0xc0, 0xcf, 0x0a, 0x07, 0x00, 0x00, 0x80, 0x20, 0xbf, 0x0e,
			0x00, 0xc0, 0x20, 0x03, 0x00, 0xc0, 0x0f, 0x0e, 0x88, 0x9c, 0xc0, 0x4f, 0x0e, 0x0c, 0x00,
			0xc0, 0x0f, 0x10, 0xe0, 0x80, 0xc0, 0x4f, 0x10, 0x41, 0x40, 0xc0, 0x8f, 0x10, 0x60, 0x80,
			0xc8, 0x0f, 0x14, 0xff, 0xff, 0x01, 0x00, 0xc8, 0x0f, 0x14, 0xff, 0xff, 0x02, 0x00, 0x0d,
			0x01, 0x00, 0x00, 0x00, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0xc8, 0x0f, 0x14, 0x00, 0x00, 0x01,
			0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x64, 0x00, 0x00, 0x00, 0xc0, 0x8f, 0x11, 0x00,
			0x00, 0xc0, 0xcf, 0x11, 0x00, 0x00, 0xf4, 0x2b });

			data.push_back({ 0x4c, 0x1f, 0x08, 0x40, 0x04, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x40, 0x04, 0xff, 0xff, 0x01, 0x00, 0x88, 0xde, 0x3f, 0x00, 0x00, 0x01,
			0x00, 0x88, 0x1e, 0x04, 0x00, 0xa0, 0xff, 0xff, 0x88, 0x5e, 0x04, 0x00, 0x00, 0xff, 0xff,
			0x88, 0x9e, 0x04, 0x0f, 0x00, 0xff, 0x00, 0x88, 0xde, 0x04, 0x32, 0x00, 0xff, 0x00, 0x88,
			0xde, 0x04, 0x00, 0x28, 0x00, 0xff, 0x88, 0x1e, 0x05, 0x10, 0x00, 0xff, 0x00, 0x88, 0x5e,
			0x05, 0x05, 0x00, 0xff, 0x00, 0x88, 0x5e, 0x05, 0x00, 0x1f, 0x00, 0xff, 0x88, 0x9e, 0x05,
			0x06, 0x00, 0xff, 0x00, 0x88, 0x9e, 0x05, 0x00, 0x02, 0x00, 0xff, 0x88, 0xde, 0x05, 0x01,
			0x00, 0xff, 0x00, 0x88, 0xde, 0x05, 0x00, 0x06, 0x00, 0xff, 0x88, 0x1e, 0x06, 0xff, 0x00,
			0xff, 0x00, 0x88, 0x1e, 0x06, 0x00, 0xff, 0x00, 0xff, 0x88, 0x5e, 0x06, 0x05, 0x00, 0xff,
			0x00, 0x88, 0x5e, 0x06, 0x00, 0x03, 0x00, 0xff, 0x88, 0x9e, 0x06, 0x05, 0x00, 0xff, 0x00,
			0x88, 0xde, 0x06, 0x78, 0x09, 0xff, 0xff, 0x88, 0x1e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x88,
			0xde, 0x07, 0xe0, 0x32, 0xff, 0xff, 0x88, 0x1e, 0x08, 0x29, 0x00, 0xff, 0xff, 0x88, 0x5e,
			0x08, 0x00, 0x00, 0x10, 0x00, 0x88, 0x5e, 0x08, 0x00, 0x00, 0x80, 0x00, 0x88, 0x5e, 0x00,
			0x03, 0x00, 0xff, 0x00, 0x88, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x5e, 0x00, 0x00,
			0x00, 0x00, 0x1e, 0x88, 0xde, 0x0d, 0xff, 0xff, 0x04, 0x00, 0x88, 0x5e, 0x0c, 0x1f, 0x00,
			0xff, 0x00, 0x88, 0x5e, 0x0e, 0xf8, 0x00, 0xff, 0x00, 0x88, 0x5e, 0x0e, 0x00, 0x81, 0x00,
			0xff, 0x88, 0x5e, 0x0c, 0x00, 0x1f, 0x00, 0xff, 0x88, 0x9e, 0x0e, 0xf8, 0x00, 0xff, 0x00,
			0x88, 0x9e, 0x0e, 0x00, 0x81, 0x00, 0xff, 0x88, 0x9e, 0x0c, 0x1f, 0x00, 0xff, 0x00, 0x88,
			0xde, 0x0e, 0xf8, 0x00, 0xff, 0x00, 0x88, 0xde, 0x0e, 0x00, 0x81, 0x00, 0xff, 0x88, 0x9e,
			0x0c, 0x00, 0x1f, 0x00, 0xff, 0x88, 0x1e, 0x0f, 0xf8, 0x00, 0xff, 0x00, 0x88, 0x1e, 0x0f,
			0x00, 0x81, 0x00, 0xff, 0x88, 0x1e, 0x0c, 0x00, 0x00, 0x0f, 0x00, 0x88, 0x1e, 0x00, 0x00,
			0xf0, 0x00, 0xf0, 0x88, 0x9e, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x88, 0x9e, 0x00, 0xff, 0xff,
			0x00, 0x06, 0xc8, 0x98, 0x10, 0x00, 0x13, 0xff, 0x1f, 0x08, 0xc0, 0x04, 0x00, 0x00, 0x00,
			0x02, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc0, 0x04, 0xff, 0xff, 0x00, 0x02, 0x08, 0xde,
			0x3f, 0x00, 0x00, 0x07, 0x00, 0x08, 0x5e, 0x00, 0xff, 0xff, 0x04, 0x00, 0x08, 0x5e, 0x00,
			0x00, 0x00, 0x08, 0x00, 0x08, 0x5e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x5e, 0x00, 0x03,
			0x00, 0x03, 0x00, 0x08, 0x1e, 0x00, 0xff, 0xff, 0x04, 0x00, 0x08, 0x9e, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x08, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x9e, 0x01, 0xff, 0xff, 0x00,
			0xde, 0x01, 0x00, 0x00, 0x08, 0x9e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x9e, 0x00, 0x00,
			0x00, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x5e,
			0x01, 0x00, 0x00, 0x08, 0x5e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x1e, 0x00, 0xff, 0xff,
			0x02, 0x00, 0x08, 0x1e, 0x00, 0xff, 0xff, 0x01, 0x00, 0x08, 0x9e, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0xff, 0xff, 0x08, 0x00, 0x08, 0xc0,
			0x05, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x82, 0xee });

			data.push_back({ 0x8c, 0x18, 0x08, 0xc0, 0x05, 0xff, 0xff, 0x01, 0x00, 0x88, 0xce, 0x3f,
			0x00, 0x00, 0x01, 0x00, 0x88, 0x0e, 0x04, 0x00, 0xa0, 0xff, 0xff, 0x88, 0x4e, 0x04, 0x00,
			0x00, 0xff, 0xff, 0x88, 0x8e, 0x04, 0x0f, 0x00, 0xff, 0x00, 0x88, 0xce, 0x04, 0x32, 0x00,
			0xff, 0x00, 0x88, 0xce, 0x04, 0x00, 0x28, 0x00, 0xff, 0x88, 0x0e, 0x05, 0x10, 0x00, 0xff,
			0x00, 0x88, 0x4e, 0x05, 0x05, 0x00, 0xff, 0x00, 0x88, 0x4e, 0x05, 0x00, 0x1f, 0x00, 0xff,
			0x88, 0x8e, 0x05, 0x06, 0x00, 0xff, 0x00, 0x88, 0x8e, 0x05, 0x00, 0x02, 0x00, 0xff, 0x88,
			0xce, 0x05, 0x0f, 0x00, 0xff, 0x00, 0x88, 0xce, 0x05, 0x00, 0x06, 0x00, 0xff, 0x88, 0x0e,
			0x06, 0x01, 0x00, 0xff, 0x00, 0x88, 0x0e, 0x06, 0x00, 0x02, 0x00, 0xff, 0x88, 0x4e, 0x06,
			0x02, 0x00, 0xff, 0x00, 0x88, 0x4e, 0x06, 0x00, 0x03, 0x00, 0xff, 0x88, 0x8e, 0x06, 0x05,
			0x00, 0xff, 0x00, 0x88, 0xce, 0x06, 0x78, 0x09, 0xff, 0xff, 0x88, 0x0e, 0x07, 0x00, 0x00,
			0xff, 0xff, 0x88, 0xce, 0x07, 0xe0, 0x32, 0xff, 0xff, 0x88, 0x0e, 0x08, 0x29, 0x00, 0xff,
			0xff, 0x88, 0x4e, 0x08, 0x00, 0x00, 0x10, 0x00, 0x88, 0x4e, 0x08, 0x00, 0x00, 0x80, 0x00,
			0x88, 0x4e, 0x00, 0x03, 0x00, 0xff, 0x00, 0x88, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88,
			0x4e, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x88, 0xce, 0x0d, 0xff, 0xff, 0x04, 0x00, 0x88, 0x0e,
			0x00, 0x00, 0xf0, 0x00, 0xf0, 0x88, 0x8e, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x88, 0x8e, 0x00,
			0xff, 0xff, 0x00, 0x06, 0xc8, 0x98, 0x10, 0x00, 0x43, 0xff, 0x4f, 0x08, 0x00, 0x06, 0x00,
			0x00, 0x00, 0x02, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x06, 0xff, 0xff, 0x00, 0x02,
			0x08, 0xce, 0x3f, 0x00, 0x00, 0x07, 0x00, 0x08, 0x4e, 0x00, 0xff, 0xff, 0x04, 0x00, 0x08,
			0x4e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x4e, 0x00, 0x03, 0x00, 0x03, 0x00, 0x08, 0x0e,
			0x00, 0xff, 0xff, 0x04, 0x00, 0x08, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x8e, 0x00,
			0x00, 0x00, 0x00, 0x02, 0x08, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x8e, 0x00, 0x00,
			0x00, 0x00, 0x10, 0x00, 0x8e, 0x01, 0xff, 0xff, 0x00, 0xce, 0x01, 0x00, 0x00, 0x08, 0x8e,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x8e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xce, 0x00,
			0x00, 0x00, 0x00, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x08, 0x4e, 0x00,
			0x00, 0x00, 0x10, 0x00, 0x08, 0x0e, 0x00, 0xff, 0xff, 0x02, 0x00, 0x08, 0x0e, 0x00, 0xff,
			0xff, 0x01, 0x00, 0x08, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x0a, 0x00, 0x00, 0x00,
			0x08, 0x0e, 0x00, 0xff, 0xff, 0x08, 0x00, 0x36, 0xaa });

			data.push_back({ 0x4c, 0x1f, 0x08, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00,
			0x00, 0x00, 0x08, 0xc0, 0x04, 0xff, 0xff, 0x00, 0x01, 0x48, 0xdd, 0x3f, 0x00, 0x00, 0x07,
			0x00, 0x48, 0xdd, 0x0e, 0x00, 0x00, 0xff, 0x03, 0x48, 0xdd, 0x02, 0x00, 0x00, 0x03, 0x00,
			0x48, 0xdd, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x48, 0xdd, 0x02, 0x00, 0x00, 0x30, 0x00, 0x48,
			0xdd, 0x02, 0x00, 0x00, 0xc0, 0x00, 0x48, 0xdd, 0x02, 0x00, 0x00, 0x00, 0x03, 0x48, 0xdd,
			0x02, 0x00, 0x00, 0x00, 0x0c, 0x48, 0xdd, 0x02, 0x00, 0x00, 0x00, 0x30, 0x48, 0xdd, 0x02,
			0x00, 0x00, 0x00, 0xc0, 0x48, 0xdd, 0x02, 0x00, 0x08, 0xff, 0xff, 0x48, 0xdd, 0x0e, 0x30,
			0x00, 0xff, 0x00, 0x48, 0x5d, 0x00, 0x51, 0x30, 0xff, 0xff, 0x48, 0x1d, 0x00, 0x2b, 0x02,
			0xff, 0x03, 0x08, 0xc0, 0x04, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08,
			0xc0, 0x04, 0xff, 0xff, 0x80, 0x00, 0x08, 0xdd, 0x3f, 0x00, 0x00, 0x07, 0x00, 0x08, 0x1d,
			0x0c, 0x00, 0x00, 0x01, 0x00, 0x08, 0x1d, 0x00, 0xff, 0xff, 0x01, 0x00, 0x08, 0x9d, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x08, 0xdd, 0x00, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d, 0x01, 0x00,
			0x00, 0x40, 0x00, 0x08, 0x5d, 0x01, 0x00, 0x00, 0x40, 0x00, 0x08, 0x9d, 0x01, 0x00, 0x00,
			0x40, 0x00, 0x08, 0xdd, 0x01, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d, 0x02, 0x00, 0x00, 0x40,
			0x00, 0x08, 0x5d, 0x02, 0x00, 0x00, 0x40, 0x00, 0x08, 0x9d, 0x02, 0x00, 0x00, 0x40, 0x00,
			0x08, 0xdd, 0x02, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d, 0x03, 0x00, 0x00, 0x40, 0x00, 0x08,
			0x5d, 0x03, 0x00, 0x00, 0x40, 0x00, 0x08, 0xdd, 0x03, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d,
			0x04, 0x00, 0x00, 0x40, 0x00, 0x08, 0x5d, 0x04, 0x00, 0x00, 0x40, 0x00, 0x08, 0x9d, 0x04,
			0x00, 0x00, 0x40, 0x00, 0x08, 0xdd, 0x04, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d, 0x05, 0x0b,
			0x00, 0x3f, 0x00, 0x08, 0x1d, 0x05, 0x00, 0x00, 0x40, 0x00, 0x08, 0x1d, 0x05, 0x00, 0x0c,
			0x00, 0x3f, 0x08, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x40, 0x08, 0x5d, 0x05, 0x0d, 0x00, 0x3f,
			0x00, 0x08, 0x5d, 0x05, 0x00, 0x00, 0x40, 0x00, 0x08, 0x5d, 0x05, 0x00, 0x0e, 0x00, 0x3f,
			0x08, 0x5d, 0x05, 0x00, 0x00, 0x00, 0x40, 0x08, 0x9d, 0x05, 0x0a, 0x00, 0x3f, 0x00, 0x08,
			0x9d, 0x05, 0x00, 0x00, 0x40, 0x00, 0x08, 0x9d, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x08, 0x9d,
			0x05, 0x00, 0x00, 0x00, 0x40, 0x08, 0xdd, 0x05, 0x0a, 0x00, 0x3f, 0x00, 0x08, 0xdd, 0x05,
			0x00, 0x00, 0x40, 0x00, 0x08, 0xdd, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x08, 0xdd, 0x05, 0x00,
			0x00, 0x00, 0x40, 0x08, 0x1d, 0x1c, 0x01, 0x00, 0xff, 0x00, 0x08, 0x1d, 0x1c, 0x00, 0x01,
			0x00, 0xff, 0x08, 0x5d, 0x1c, 0x01, 0x00, 0xff, 0x00, 0x08, 0x5d, 0x1c, 0x00, 0x01, 0x00,
			0xff, 0x08, 0x9d, 0x1c, 0x01, 0x00, 0xff, 0x00, 0x08, 0x9d, 0x1c, 0x00, 0x01, 0x00, 0xff,
			0x08, 0xdd, 0x1c, 0x01, 0x00, 0xff, 0x00, 0x08, 0xdd, 0x1c, 0x00, 0x01, 0x00, 0xff, 0x08,
			0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x1d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x1d,
			0x14, 0x00, 0x00, 0x1f, 0x00, 0x08, 0x1d, 0x14, 0x00, 0x00, 0x00, 0x1f, 0x08, 0x5d, 0x14,
			0x01, 0x00, 0x1f, 0x00, 0x08, 0x5d, 0x14, 0x00, 0x01, 0x00, 0x1f, 0x08, 0x9d, 0x14, 0x02,
			0x00, 0x1f, 0x00, 0x08, 0x9d, 0x14, 0x00, 0x02, 0x00, 0x1f, 0x9e, 0x95 });

			data.push_back({ 0x6c, 0x0b, 0x08, 0xdd, 0x14, 0x03, 0x00, 0x1f, 0x00, 0x08, 0xdd, 0x14,
			0x00, 0x03, 0x00, 0x1f, 0x08, 0x1d, 0x14, 0x00, 0x00, 0x00, 0x20, 0x08, 0x5d, 0x14, 0x00,
			0x00, 0x00, 0x20, 0x08, 0x9d, 0x14, 0x00, 0x00, 0x00, 0x20, 0x08, 0xdd, 0x14, 0x00, 0x00,
			0x00, 0x20, 0x08, 0x1d, 0x15, 0x00, 0x00, 0x00, 0x20, 0x08, 0x5d, 0x15, 0x00, 0x00, 0x00,
			0x20, 0x08, 0x9d, 0x15, 0x00, 0x00, 0x00, 0x20, 0x08, 0xdd, 0x15, 0x00, 0x00, 0x00, 0x20,
			0x08, 0x1d, 0x16, 0x00, 0x00, 0x00, 0x20, 0x08, 0x5d, 0x16, 0x00, 0x00, 0x00, 0x20, 0x08,
			0x9d, 0x16, 0x00, 0x00, 0x00, 0x20, 0x08, 0xdd, 0x16, 0x00, 0x00, 0x00, 0x20, 0x08, 0x9d,
			0x28, 0xff, 0xff, 0x01, 0x00, 0x08, 0x9d, 0x28, 0xff, 0xff, 0x02, 0x00, 0x08, 0x9d, 0x28,
			0xff, 0xff, 0x04, 0x00, 0x08, 0x9d, 0x28, 0xff, 0xff, 0x08, 0x00, 0x08, 0x1d, 0x3e, 0xff,
			0xff, 0x01, 0x00, 0x08, 0x1d, 0x2d, 0x00, 0x00, 0x3f, 0x00, 0x08, 0x1d, 0x2d, 0xff, 0xff,
			0x40, 0x00, 0x08, 0x1d, 0x2d, 0x00, 0x00, 0x00, 0x1f, 0x08, 0x1d, 0x2d, 0xff, 0xff, 0x00,
			0x20, 0x08, 0x1d, 0x1c, 0x30, 0x30, 0xff, 0xff, 0x08, 0x5d, 0x1c, 0x30, 0x30, 0xff, 0xff,
			0x08, 0x1d, 0x00, 0xff, 0xff, 0xc0, 0x30, 0x7b, 0x38 });
			
			data.push_back({ 0x4c, 0x01, 0xc0, 0x18, 0x10, 0x00, 0x01, 0xc0, 0x58, 0x10, 0x00, 0x00,
			0xc0, 0x98, 0x10, 0x00, 0x50, 0xc0, 0xd8, 0x10, 0x33, 0x00, 0xb2, 0x1c });

			data.push_back({ 0xc4, 0x08, 0x18, 0x04, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x18, 0x1e, 0x00, 0x01, 0x02, 0xbb });
			
			data.push_back({ 0xe0, 0x08, 0x58, 0x04, 0x10, 0x00, 0xff, 0xff, 0x08, 0x18, 0x01, 0x01, 0x00, 0x3f, 0x00, 0x74, 0x5c });
			
			data.push_back({ 0xc4, 0x08, 0x58, 0x1c, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x18, 0x1e, 0x01, 0x01, 0x1b, 0x8c });
			
			data.push_back({ 0xf8, 0x11, 0x08, 0x58, 0x04, 0x10, 0x00, 0xff, 0xff, 0x08, 0x80, 0x04,
			0x00, 0x00, 0x02, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x04, 0xff, 0xff, 0x02,
			0x00, 0x88, 0x41, 0x06, 0x11, 0x00, 0xd1, 0x01, 0x80, 0x01, 0x08, 0x00, 0x00, 0x80, 0x41,
			0x08, 0x00, 0x00, 0x80, 0x81, 0x08, 0x00, 0x00, 0x80, 0xc1, 0x08, 0x00, 0x00, 0x80, 0x1f,
			0x06, 0xc2, 0x82, 0x80, 0x5f, 0x06, 0x2e, 0x00, 0x80, 0x9f, 0x06, 0x44, 0x80, 0x80, 0xdf,
			0x06, 0x1c, 0x07, 0x80, 0x1f, 0x07, 0x00, 0x80, 0x80, 0x5f, 0x07, 0x00, 0x00, 0x88, 0xdf,
			0x08, 0xff, 0xff, 0x01, 0x00, 0x88, 0xdf, 0x08, 0xff, 0xff, 0x02, 0x00, 0x0d, 0x0a, 0x00,
			0x00, 0x00, 0x88, 0xdf, 0x08, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x64, 0x00, 0x00, 0x00, 0x80,
			0x5f, 0x08, 0x00, 0x00, 0x80, 0x9f, 0x08, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x70, 0x07, 0x80,
			0x5f, 0x00, 0x00, 0x00, 0x80, 0x9f, 0x00, 0x00, 0x00, 0x80, 0xdf, 0x00, 0x03, 0x00, 0x80,
			0x1f, 0x01, 0x70, 0x07, 0x80, 0x5f, 0x01, 0x00, 0x00, 0x80, 0x9f, 0x01, 0x00, 0x00, 0x80,
			0xdf, 0x01, 0x03, 0x00, 0x80, 0x1f, 0x02, 0x70, 0x07, 0x80, 0x5f, 0x02, 0x00, 0x00, 0x80,
			0x9f, 0x02, 0x00, 0x00, 0x80, 0xdf, 0x02, 0x03, 0x00, 0x80, 0x1f, 0x03, 0x70, 0x07, 0x80,
			0x5f, 0x03, 0x00, 0x00, 0x80, 0x9f, 0x03, 0x00, 0x00, 0x80, 0xdf, 0x03, 0x03, 0x00, 0x80,
			0x1f, 0x04, 0x70, 0x07, 0x80, 0x5f, 0x04, 0x00, 0x00, 0x80, 0x9f, 0x04, 0x00, 0x80, 0x88,
			0x1f, 0x09, 0xff, 0xff, 0x01, 0x00, 0x88, 0x1f, 0x09, 0xff, 0xff, 0x02, 0x00, 0x0d, 0x0a,
			0x00, 0x00, 0x00, 0x88, 0x1f, 0x09, 0x00, 0x00, 0x01, 0x00, 0x80, 0x1f, 0x09, 0x00, 0x00,
			0x80, 0xdf, 0x04, 0x00, 0x00, 0x80, 0x1f, 0x05, 0x80, 0x0f, 0x88, 0xdf, 0x05, 0xff, 0xff,
			0x01, 0x00, 0x80, 0x1f, 0x0a, 0x00, 0x00, 0x80, 0x5f, 0x0a, 0x01, 0x00, 0x0d, 0xe8, 0x03,
			0x00, 0x00, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x5c, 0x74 });
			
			data.push_back({ 0x18, 0x02, 0x08, 0x80, 0x04, 0x00, 0x00, 0x10, 0x00, 0x0d, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x80, 0x04, 0xff, 0xff, 0x10, 0x00, 0xc8, 0xdb, 0x3f, 0x00, 0x00, 0x07,
			0x00, 0xc8, 0x1b, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x12, 0x9b });
			
			data.push_back({ 0x28, 0x1e, 0x08, 0x80, 0x04, 0x00, 0x00, 0x08, 0x00, 0x0d, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x80, 0x04, 0xff, 0xff, 0x08, 0x00, 0x48, 0xde, 0x3f, 0x00, 0x00, 0x07,
			0x00, 0x48, 0x1e, 0x04, 0xff, 0xff, 0x80, 0x00, 0x48, 0x1e, 0x04, 0x00, 0x0a, 0x00, 0x3f,
			0x48, 0x5e, 0x04, 0xff, 0xff, 0x80, 0x00, 0x48, 0x5e, 0x04, 0x00, 0x0a, 0x00, 0x3f, 0x48,
			0x9e, 0x04, 0xff, 0xff, 0x80, 0x00, 0x48, 0x9e, 0x04, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0xde,
			0x04, 0xff, 0xff, 0x80, 0x00, 0x48, 0xde, 0x04, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x1e, 0x05,
			0xff, 0xff, 0x80, 0x00, 0x48, 0x1e, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x5e, 0x05, 0xff,
			0xff, 0x80, 0x00, 0x48, 0x5e, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x9e, 0x05, 0xff, 0xff,
			0x80, 0x00, 0x48, 0x9e, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0xde, 0x05, 0xff, 0xff, 0x80,
			0x00, 0x48, 0xde, 0x05, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x1e, 0x06, 0xff, 0xff, 0x80, 0x00,
			0x48, 0x1e, 0x06, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x5e, 0x06, 0xff, 0xff, 0x80, 0x00, 0x48,
			0x5e, 0x06, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0x9e, 0x06, 0xff, 0xff, 0x80, 0x00, 0x48, 0x9e,
			0x06, 0x00, 0x0a, 0x00, 0x3f, 0x48, 0xde, 0x06, 0xff, 0xff, 0x80, 0x00, 0x48, 0xde, 0x06,
			0x00, 0x0a, 0x00, 0x3f, 0x48, 0x1e, 0x07, 0xff, 0xff, 0x80, 0x00, 0x48, 0x1e, 0x07, 0x00,
			0x0a, 0x00, 0x3f, 0x48, 0x5e, 0x07, 0xff, 0xff, 0x80, 0x00, 0x48, 0x5e, 0x07, 0x00, 0x0a,
			0x00, 0x3f, 0x48, 0x9e, 0x07, 0xff, 0xff, 0x80, 0x00, 0x48, 0x9e, 0x07, 0x00, 0x0a, 0x00,
			0x3f, 0x48, 0xde, 0x07, 0xff, 0xff, 0x80, 0x00, 0x48, 0xde, 0x07, 0x00, 0x0a, 0x00, 0x3f,
			0x48, 0x9e, 0x00, 0x03, 0x00, 0x03, 0x00, 0x48, 0x9e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x48,
			0x9e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x48, 0x9e, 0x00, 0xff, 0xff, 0x10, 0x00, 0x48, 0x1e,
			0x14, 0x00, 0x00, 0x00, 0x40, 0x48, 0x5e, 0x14, 0x00, 0x00, 0x00, 0x40, 0x48, 0x1e, 0x14,
			0x00, 0x00, 0x1f, 0x00, 0x48, 0x1e, 0x14, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x5e, 0x14, 0x01,
			0x00, 0x1f, 0x00, 0x48, 0x5e, 0x14, 0x00, 0x02, 0x00, 0x3e, 0x48, 0x9e, 0x14, 0x02, 0x00,
			0x1f, 0x00, 0x48, 0x9e, 0x14, 0x00, 0x04, 0x00, 0x3e, 0x48, 0xde, 0x14, 0x03, 0x00, 0x1f,
			0x00, 0x48, 0xde, 0x14, 0x00, 0x06, 0x00, 0x3e, 0x48, 0x1e, 0x15, 0x04, 0x00, 0x1f, 0x00,
			0x48, 0x1e, 0x15, 0x00, 0x08, 0x00, 0x3e, 0x48, 0x5e, 0x15, 0x05, 0x00, 0x1f, 0x00, 0x48,
			0x5e, 0x15, 0x00, 0x0a, 0x00, 0x3e, 0x48, 0x9e, 0x15, 0x06, 0x00, 0x1f, 0x00, 0x48, 0x9e,
			0x15, 0x00, 0x0c, 0x00, 0x3e, 0x48, 0xde, 0x15, 0x07, 0x00, 0x1f, 0x00, 0x48, 0xde, 0x15,
			0x00, 0x0e, 0x00, 0x3e, 0x48, 0xde, 0x02, 0xff, 0xff, 0x10, 0x80, 0x48, 0x1e, 0x03, 0xff,
			0xff, 0x10, 0x80, 0x48, 0x5e, 0x03, 0xff, 0xff, 0x80, 0x80, 0x48, 0x9e, 0x03, 0xff, 0xff,
			0x80, 0x80, 0x48, 0x9e, 0x02, 0xff, 0xff, 0x11, 0x00, 0x40, 0x5e, 0x12, 0x4a, 0x04, 0x40,
			0x9e, 0x12, 0x4a, 0x04, 0x40, 0x9e, 0x11, 0xff, 0x0f, 0x48, 0x1e, 0x00, 0xff, 0xff, 0x00,
			0xf0, 0x48, 0x1e, 0x00, 0xff, 0xff, 0x00, 0x03, 0x48, 0x1e, 0x00, 0xff, 0xff, 0x1f, 0x00,
			0x48, 0x5e, 0x00, 0x00, 0x00, 0x10, 0x63, 0x92, 0x97 });
			
			data.push_back({ 0xe8, 0x0c, 0xc8, 0x98, 0x10, 0x01, 0x03, 0xff, 0x0f, 0x08, 0x40, 0x04,
			0x00, 0x00, 0x02, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x04, 0xff, 0xff, 0x02,
			0x00, 0xc8, 0x1e, 0x00, 0xff, 0xff, 0x02, 0x00, 0xc8, 0xde, 0x3f, 0x00, 0x00, 0x01, 0x00,
			0xc8, 0x1e, 0x04, 0xc0, 0x00, 0xff, 0xff, 0xc8, 0x5e, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc8,
			0x9e, 0x04, 0x32, 0x00, 0xff, 0x00, 0xc8, 0x9e, 0x04, 0x00, 0x28, 0x00, 0xff, 0xc8, 0xde,
			0x04, 0x10, 0x00, 0xff, 0x00, 0xc8, 0xde, 0x04, 0x00, 0x08, 0x00, 0xff, 0xc8, 0x1e, 0x05,
			0x01, 0x00, 0xff, 0x00, 0xc8, 0x1e, 0x05, 0x00, 0x01, 0x00, 0xff, 0xc8, 0x5e, 0x05, 0x02,
			0x00, 0xff, 0x00, 0xc8, 0x1e, 0x06, 0xe0, 0x32, 0xff, 0xff, 0xc8, 0x5e, 0x06, 0x29, 0x00,
			0xff, 0xff, 0xc8, 0x9e, 0x06, 0x46, 0x05, 0xff, 0xff, 0xc8, 0xde, 0x06, 0x00, 0x00, 0xff,
			0xff, 0xc8, 0x1e, 0x07, 0x00, 0x00, 0x02, 0x00, 0xc8, 0x1e, 0x07, 0x00, 0x00, 0x80, 0x00,
			0xc8, 0x9e, 0x00, 0x00, 0x00, 0xff, 0x00, 0xc8, 0x1e, 0x00, 0x00, 0xf0, 0x00, 0xf0, 0xc8,
			0xde, 0x00, 0xff, 0xff, 0x03, 0x00, 0xc8, 0xde, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xc8, 0xde,
			0x00, 0x00, 0x07, 0x00, 0x07, 0xc8, 0x9e, 0x00, 0xff, 0xff, 0x00, 0x1f, 0xc8, 0xde, 0x00,
			0xff, 0xff, 0x40, 0x00, 0x0d, 0x10, 0x27, 0x00, 0x00, 0xc8, 0x9e, 0x00, 0xff, 0xff, 0x00,
			0x60, 0x74, 0x2a });

			data.push_back({ 0x58, 0x16, 0x48, 0x40, 0x0e, 0xff, 0xff, 0x10, 0x00, 0x08, 0x80, 0x25,
			0xff, 0xff, 0x01, 0x00, 0x08, 0x80, 0x04, 0x00, 0x00, 0x00, 0x01, 0x08, 0x80, 0x04, 0xff,
			0xff, 0x00, 0x01, 0x88, 0x41, 0x08, 0xff, 0xff, 0x01, 0x00, 0x88, 0x01, 0x08, 0xff, 0xff,
			0x01, 0x00, 0x88, 0xc1, 0x08, 0xff, 0xff, 0x00, 0x04, 0x88, 0x81, 0x08, 0xff, 0xff, 0x00,
			0x04, 0x88, 0x01, 0x14, 0x00, 0x00, 0x01, 0x00, 0x80, 0x9d, 0x08, 0x00, 0x00, 0x80, 0x81,
			0x06, 0x00, 0x12, 0x80, 0xc1, 0x06, 0x60, 0x67, 0x88, 0x01, 0x07, 0xff, 0xff, 0x08, 0x00,
			0x88, 0x41, 0x05, 0x00, 0x00, 0x00, 0x80, 0x80, 0x01, 0x07, 0x00, 0x00, 0x80, 0x41, 0x07,
			0x85, 0x00, 0x88, 0x1d, 0x00, 0xff, 0xff, 0x00, 0x04, 0x88, 0x01, 0x07, 0x00, 0x00, 0x08,
			0x00, 0x88, 0x41, 0x05, 0xff, 0xff, 0x00, 0x80, 0x88, 0x81, 0x08, 0x00, 0x00, 0x00, 0x04,
			0x88, 0xc1, 0x08, 0x00, 0x00, 0x00, 0x04, 0x88, 0x01, 0x08, 0x00, 0x00, 0x01, 0x00, 0x88,
			0x41, 0x08, 0x00, 0x00, 0x01, 0x00, 0x88, 0xc1, 0x06, 0x00, 0x00, 0x20, 0x00, 0x88, 0x01,
			0x14, 0xff, 0xff, 0x01, 0x00, 0x80, 0x9d, 0x08, 0x43, 0x00, 0x80, 0x9d, 0x06, 0x00, 0x00,
			0x08, 0x80, 0x25, 0x00, 0x00, 0x01, 0x00, 0x48, 0x40, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x08,
			0x40, 0x04, 0x00, 0x00, 0x20, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x04, 0xff,
			0xff, 0x20, 0x00, 0x48, 0xd1, 0x3f, 0x00, 0x00, 0x03, 0x00, 0x00, 0xd1, 0x14, 0x00, 0x00,
			0x00, 0xd1, 0x15, 0x08, 0x07, 0x08, 0x11, 0x16, 0xff, 0xff, 0x00, 0x80, 0x08, 0x11, 0x16,
			0xff, 0xff, 0x08, 0x00, 0x08, 0x51, 0x17, 0xff, 0xff, 0x00, 0x10, 0x00, 0x11, 0x17, 0xff,
			0xff, 0x08, 0x11, 0x00, 0xff, 0xff, 0x43, 0x00, 0x08, 0xc0, 0x3d, 0xff, 0xff, 0x00, 0x80,
			0x00, 0x91, 0x10, 0x05, 0x00, 0x00, 0xd1, 0x11, 0x01, 0x00, 0x08, 0xd1, 0x12, 0xff, 0xff,
			0x04, 0x00, 0x08, 0xd1, 0x12, 0xff, 0xff, 0x10, 0x00, 0x08, 0xd1, 0x12, 0xff, 0xff, 0x00,
			0x20, 0x08, 0x51, 0x13, 0x10, 0x00, 0x30, 0x00, 0x08, 0x11, 0x00, 0xff, 0xff, 0x0b, 0x00,
			0x00, 0x11, 0x17, 0x10, 0x27, 0x08, 0x11, 0x16, 0x00, 0x00, 0x00, 0x80, 0x48, 0xc0, 0x22,
			0x08, 0x00, 0xff, 0x00, 0x48, 0x00, 0x1d, 0x66, 0x00, 0xff, 0x00, 0x48, 0x00, 0x1b, 0xff,
			0xff, 0x00, 0x01, 0x48, 0x40, 0x0d, 0xff, 0xff, 0x01, 0x00, 0x48, 0x40, 0x0e, 0x00, 0x00,
			0x01, 0x00, 0xde, 0x83 });

			data.push_back({ 0xf8, 0x08, 0x88, 0x41, 0x06, 0x00, 0x00, 0x00, 0x20, 0x88, 0x41, 0x06,
			0xff, 0xff, 0x00, 0x40, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x88, 0x41, 0x06, 0xff, 0xff, 0x00,
			0x80, 0x0d, 0xe8, 0x03, 0x00, 0x00, 0x88, 0x41, 0x06, 0xff, 0xff, 0x00, 0x10, 0x08, 0x18,
			0xc4, 0xff, 0xff, 0x0e, 0x00, 0x08, 0x18, 0xc4, 0x0e, 0x00, 0x0e, 0x00, 0x08, 0x58, 0x04,
			0x10, 0x00, 0xff, 0xff, 0x08, 0x18, 0x40, 0xff, 0xff, 0x01, 0x00, 0x08, 0x18, 0xc9, 0xff,
			0xff, 0x01, 0x00, 0x08, 0x98, 0xc9, 0xff, 0xff, 0x01, 0x00, 0x08, 0x58, 0xc9, 0xff, 0xff,
			0x01, 0x00, 0x08, 0x58, 0xc4, 0xff, 0xff, 0x01, 0x00, 0x08, 0x18, 0x40, 0xff, 0xff, 0x01,
			0x00, 0x08, 0x58, 0xc4, 0x00, 0x00, 0x04, 0x00, 0x08, 0x58, 0xc4, 0xff, 0xff, 0x08, 0x00,
			0x08, 0x58, 0xc4, 0xff, 0xff, 0x02, 0x00, 0x08, 0x58, 0x44, 0xff, 0xff, 0x01, 0x00, 0x08,
			0xd8, 0x44, 0x05, 0x00, 0x3f, 0x00, 0x08, 0xd8, 0x44, 0x00, 0x02, 0x00, 0x1f, 0xcf, 0xb4 });
			
			data.push_back({ 0x48, 0x01, 0xc0, 0x18, 0x10, 0x00, 0x01, 0xc0, 0x58, 0x10, 0x00, 0x00,
			0xc0, 0x98, 0x10, 0x01, 0x00, 0xc0, 0xd8, 0x10, 0x03, 0x00, 0x6e, 0x5c });
			
			data.push_back({ 0xe0, 0x88, 0xda, 0x04, 0xff, 0xff, 0x02, 0x00, 0x88, 0x9a, 0x1c, 0xff,
			0xff, 0x01, 0x00, 0x1b, 0x03 });
			
			data.push_back({ 0x74, 0x88, 0x9e, 0x00, 0xff, 0xff, 0x00, 0x18, 0x5b, 0x82 });
			
			//44个
			data.push_back({ 0x74, 0x88, 0x8e, 0x00, 0xff, 0xff, 0x00, 0x18, 0x19, 0x32 });
			
			for (const auto& x : data) {
				if (device_->i2cWrite(x.begin(), x.size(), 0x52) != x.size()) {
					success = false;
					setLastError(device_->getLastError());
					break;
				}
				std::this_thread::sleep_for(std::chrono::milliseconds(100));
			}

			if (!success) {
				break;
			}
			//解串器通道
			uint8_t deserdes0[10] = { 0x74, 0x08, 0xd8, 0x24, 0x01, 0x00, 0x3f, 0x00, 0x3c, 0x0c };
			uint8_t deserdes1[10] = { 0x74, 0x08, 0xd8, 0x24, 0x02, 0x00, 0x3f, 0x00, 0x19, 0xc1 };
			uint8_t deserdes2[10] = { 0x74, 0x08, 0xd8, 0x24, 0x03, 0x00, 0x3f, 0x00, 0x05, 0x7a };
			uint8_t deserdes3[10] = { 0x74, 0x08, 0xd8, 0x24, 0x04, 0x00, 0x3f, 0x00, 0x52, 0x5b };
			if (device_->i2cWrite(deserdes0, sizeof(deserdes0), 0x52) != sizeof(deserdes0)) {
				setLastError(device_->getLastError());
				break;
			}
		}
		else if (sensor_type_ == SensorType::SC233AT_EEPROM_M65Q68_UNIVERSAL) {
			std::string registerText = 
			R"(
				0x62,0x009B,0x00,0x1608
				0x00,0xff,0x64,0x0808
				0x62,0x2022,0x00,0x1608
				0x62,0x5000,0x5c,0x1608
				0x62,0x2022,0x00,0x1608
				0x62,0x0140,0x23,0x1608
				0x62,0x0180,0x23,0x1608
				0x62,0x01c0,0x23,0x1608
				0x62,0x3453,0x38,0x1608
				0x62,0x3452,0x44,0x1608
				0x00,0xff,0x64,0x0808
				0x62,0x300e,0x6f,0x1608
				0x62,0x310e,0x6f,0x1608
				0x62,0x320e,0x6f,0x1608
				0x62,0x330e,0x6f,0x1608
				0x62,0x307b,0x12,0x1608
				0x62,0x30bc,0x8f,0x1608
				0x62,0x317b,0x12,0x1608
				0x62,0x31bc,0x8f,0x1608
				0x62,0x327b,0x12,0x1608
				0x62,0x32bc,0x8f,0x1608
				0x62,0x337b,0x12,0x1608
				0x62,0x33bc,0x8f,0x1608
				0x62,0x3000,0x32,0x1608
				0x62,0x3077,0x20,0x1608
				0x62,0x2012,0x7f,0x1608
				0x62,0x30bb,0x10,0x1608
				0x62,0x3067,0x6c,0x1608
				0x62,0x3069,0x1c,0x1608
				0x62,0x3069,0x1c,0x1608
				0x62,0x306b,0x0b,0x1608
				0x62,0x3068,0xa8,0x1608
				0x62,0x306a,0x6b,0x1608
				0x62,0x30bb,0x10,0x1608
				0x62,0x3090,0x8c,0x1608
				0x62,0x3100,0x32,0x1608
				0x62,0x3177,0x20,0x1608
				0x62,0x2212,0x7f,0x1608
				0x62,0x31bb,0x10,0x1608
				0x62,0x3167,0x6c,0x1608
				0x62,0x3169,0x1c,0x1608
				0x62,0x3169,0x1c,0x1608
				0x62,0x316b,0x0b,0x1608
				0x62,0x3168,0xa8,0x1608
				0x62,0x316a,0x6b,0x1608
				0x62,0x31bb,0x10,0x1608
				0x62,0x3190,0x8c,0x1608
				0x62,0x3200,0x32,0x1608
				0x62,0x3277,0x20,0x1608
				0x62,0x2412,0x7f,0x1608
				0x62,0x32bb,0x10,0x1608
				0x62,0x3267,0x6c,0x1608
				0x62,0x3269,0x1c,0x1608
				0x62,0x3269,0x1c,0x1608
				0x62,0x326b,0x0b,0x1608
				0x62,0x3268,0xa8,0x1608
				0x62,0x326a,0x6b,0x1608
				0x62,0x32bb,0x10,0x1608
				0x62,0x3290,0x8c,0x1608
				0x62,0x3300,0x32,0x1608
				0x62,0x3377,0x20,0x1608
				0x62,0x2612,0x7f,0x1608
				0x62,0x33bb,0x10,0x1608
				0x62,0x3367,0x6c,0x1608
				0x62,0x3369,0x1c,0x1608
				0x62,0x3369,0x1c,0x1608
				0x62,0x336b,0x0b,0x1608
				0x62,0x3368,0xa8,0x1608
				0x62,0x336a,0x6b,0x1608
				0x62,0x33bb,0x10,0x1608
				0x62,0x3390,0x8c,0x1608
				0x62,0x0006,0x55,0x1608
				0x62,0x0008,0x00,0x1608
				0x62,0x1f0c,0x01,0x1608
				0x62,0x200e,0x81,0x1608
				0x62,0x220e,0x81,0x1608
				0x62,0x240e,0x81,0x1608
				0x62,0x260e,0x81,0x1608
				0x62,0x2110,0x3c,0x1608
				0x62,0x2310,0x3c,0x1608
				0x62,0x2510,0x3c,0x1608
				0x62,0x2710,0x3c,0x1608
				0x62,0x2110,0xbc,0x1608
				0x62,0x2310,0xbc,0x1608
				0x62,0x2510,0xbc,0x1608
				0x62,0x2710,0xbc,0x1608
				0x62,0x2111,0x00,0x1608
				0x62,0x2112,0x00,0x1608
				0x62,0x2311,0x00,0x1608
				0x62,0x2312,0x00,0x1608
				0x62,0x2511,0x00,0x1608
				0x62,0x2512,0x00,0x1608
				0x62,0x2711,0x00,0x1608
				0x62,0x2712,0x00,0x1608
				0x62,0x200f,0x00,0x1608
				0x62,0x2010,0x00,0x1608
				0x62,0x220f,0x00,0x1608
				0x62,0x2210,0x00,0x1608
				0x62,0x240f,0x00,0x1608
				0x62,0x2410,0x00,0x1608
				0x62,0x260f,0x00,0x1608
				0x62,0x2610,0x00,0x1608
				0x62,0x2110,0xfc,0x1608
				0x62,0x2310,0xfc,0x1608
				0x62,0x2510,0xfc,0x1608
				0x62,0x2710,0xfc,0x1608
				0x62,0x2110,0xfe,0x1608
				0x62,0x2310,0xfe,0x1608
				0x62,0x2510,0xfe,0x1608
				0x62,0x2710,0xfe,0x1608
				0x62,0x1f0c,0x00,0x1608
				0x62,0x2110,0xfc,0x1608
				0x62,0x2310,0xfc,0x1608
				0x62,0x2510,0xfc,0x1608
				0x62,0x2710,0xfc,0x1608
				0x62,0x2110,0xf8,0x1608
				0x62,0x2310,0xf8,0x1608
				0x62,0x2510,0xf8,0x1608
				0x62,0x2710,0xf8,0x1608
				0x62,0x2110,0xb8,0x1608
				0x62,0x2310,0xb8,0x1608
				0x62,0x2510,0xb8,0x1608
				0x62,0x2710,0xb8,0x1608
				0x62,0x2110,0x38,0x1608
				0x62,0x2310,0x38,0x1608
				0x62,0x2510,0x38,0x1608
				0x62,0x2710,0x38,0x1608
				0x62,0x200e,0x80,0x1608
				0x62,0x220e,0x80,0x1608
				0x62,0x240e,0x80,0x1608
				0x62,0x260e,0x80,0x1608
				0x62,0x2111,0xff,0x1608
				0x62,0x2112,0x03,0x1608
				0x62,0x2311,0xff,0x1608
				0x62,0x2312,0x03,0x1608
				0x62,0x2511,0xff,0x1608
				0x62,0x2512,0x03,0x1608
				0x62,0x2711,0xff,0x1608
				0x62,0x2712,0x03,0x1608
				0x62,0x200f,0xff,0x1608
				0x62,0x2010,0x03,0x1608
				0x62,0x220f,0xff,0x1608
				0x62,0x2210,0x03,0x1608
				0x62,0x240f,0xff,0x1608
				0x62,0x2410,0x03,0x1608
				0x62,0x260f,0xff,0x1608
				0x62,0x2610,0x03,0x1608
				0x62,0x014e,0x03,0x1608
				0x62,0x014f,0x03,0x1608
				0x62,0x0150,0x03,0x1608
				0x62,0x0151,0x03,0x1608
				0x00,0xff,0x02,0x0808
				0x80,0x011c,0x20,0x1608
				0x80,0x0120,0x40,0x1608
				0x80,0x010e,0x07,0x1608
				0x00,0xff,0x02,0x0808
				0x80,0x0610,0x88,0x1608
				0x80,0xa21f,0x00,0x1608
				0x80,0xa220,0x00,0x1608
				0x80,0xa221,0x00,0x1608
				0x80,0xa222,0x00,0x1608
				0x80,0xa223,0x00,0x1608
				0x80,0xa224,0x04,0x1608
				0x80,0xa225,0x04,0x1608
				0x80,0xa226,0x04,0x1608
				0x80,0xa227,0x04,0x1608
				0x80,0xa228,0x04,0x1608
				0x80,0xa270,0x0a,0x1608
				0x80,0xa271,0x0a,0x1608
				0x80,0xa272,0x0a,0x1608
				0x80,0xa273,0x0a,0x1608
				0x80,0xa274,0x0a,0x1608
				0x80,0xa229,0x00,0x1608
				0x80,0xa22a,0x00,0x1608
				0x80,0xa22b,0x00,0x1608
				0x80,0xa22c,0x00,0x1608
				0x80,0xa22d,0x00,0x1608
				0x80,0xa147,0x07,0x1608
				0x80,0x0b60,0xd2,0x1608
				0x80,0x0b70,0xd2,0x1608
				0x80,0x0b70,0xd2,0x1608
				0x80,0x0b71,0x59,0x1608
				0x80,0x0b6b,0x1b,0x1608
				0x80,0x0b69,0x00,0x1608
				0x80,0x0b6a,0x00,0x1608
				0x80,0x0b66,0x1c,0x1608
				0x80,0x0b70,0xd3,0x1608
				0x80,0x0b70,0xd2,0x1608
				0x80,0x00be,0x04,0x1608
				0x80,0xa26f,0x01,0x1608
				0x80,0x0005,0x00,0x1608
				0x80,0xa27c,0x04,0x1608
				0x80,0x0005,0x01,0x1608
				0x80,0xa10a,0x01,0x1608
				0x80,0xa002,0x00,0x1608
				0x80,0xa002,0x01,0x1608
				0x80,0x04c7,0x00,0x1608
				0x80,0x0610,0x98,0x1608
				0x80,0x0631,0xa0,0x1608
				0x80,0x0632,0x0b,0x1608
				0x80,0x0630,0x84,0x1608
				0x62,0x446e,0x01,0x1608
				0x62,0x1802,0xd1,0x1608
				0x62,0x1803,0x43,0x1608
				0x62,0x1804,0x00,0x1608
				0x62,0x1801,0x0b,0x1608
				0x62,0x1807,0x01,0x1608
				0x62,0x180f,0x0b,0x1608
				0x62,0x1800,0x23,0x1608
				0x62,0x0600,0x00,0x1608
				0x62,0x0601,0x00,0x1608
				0x62,0x009d,0x01,0x1608
				0x00,0xff,0x10,0x0808
				0x62,0x06d4,0x02,0x1608
				0x62,0x0690,0x00,0x1608
				0x62,0x0691,0x00,0x1608
				0x62,0x0692,0x00,0x1608
				0x62,0x0693,0x00,0x1608
				0x62,0x2139,0x00,0x1608
				0x62,0x2339,0x00,0x1608
				0x62,0x2539,0x00,0x1608
				0x62,0x2739,0x00,0x1608
				0x62,0x0608,0x01,0x1608
				0x62,0x0609,0x01,0x1608
				0x62,0x060a,0x01,0x1608
				0x62,0x060b,0x01,0x1608
				0x62,0x0610,0x00,0x1608
				0x62,0x0611,0x01,0x1608
				0x62,0x0612,0x02,0x1608
				0x62,0x0613,0x03,0x1608
				0x62,0x0638,0x00,0x1608
				0x62,0x0639,0x00,0x1608
				0x62,0x063a,0x00,0x1608
				0x62,0x063b,0x00,0x1608
				0x62,0x0708,0x00,0x1608
				0x62,0x0648,0x40,0x1608
				0x62,0x0649,0x40,0x1608
				0x62,0x064a,0x40,0x1608
				0x62,0x064b,0x40,0x1608
				0x62,0x064c,0x00,0x1608
				0x62,0x064d,0x00,0x1608
				0x62,0x064e,0x00,0x1608
				0x62,0x064f,0x00,0x1608
				0x62,0x0089,0x08,0x1608
				0x62,0x0700,0x00,0x1608
				0x62,0x0694,0x00,0x1608
				0x62,0x0695,0x01,0x1608
				0x62,0x0696,0x02,0x1608
				0x62,0x0697,0x00,0x1608
				0x62,0x8780,0x0c,0x1608
				0x62,0x8740,0x10,0x1608
				0x62,0x874a,0x13,0x1608
				0x62,0x8760,0x10,0x1608
				0x62,0x876a,0x13,0x1608
				0x62,0x85c8,0x0e,0x1608
				0x62,0x85d4,0x06,0x1608
				0x62,0x85e0,0x50,0x1608
				0x62,0x85ec,0x00,0x1608
				0x62,0x861c,0x01,0x1608
				0x62,0x85f8,0x0c,0x1608
				0x62,0x8634,0x02,0x1608
				0x62,0x8604,0xf0,0x1608
				0x62,0x8670,0x80,0x1608
				0x62,0x85c9,0x0e,0x1608
				0x62,0x85d5,0x06,0x1608
				0x62,0x85e1,0x50,0x1608
				0x62,0x85ed,0x00,0x1608
				0x62,0x861d,0x01,0x1608
				0x62,0x85f9,0x0c,0x1608
				0x62,0x8635,0x02,0x1608
				0x62,0x8605,0xf0,0x1608
				0x62,0x8671,0x80,0x1608
				0x62,0x85ca,0x0e,0x1608
				0x62,0x85d6,0x06,0x1608
				0x62,0x85e2,0x50,0x1608
				0x62,0x85ee,0x00,0x1608
				0x62,0x861e,0x01,0x1608
				0x62,0x85fa,0x0c,0x1608
				0x62,0x8636,0x02,0x1608
				0x62,0x8606,0xf0,0x1608
				0x62,0x8672,0x80,0x1608
				0x62,0x85cb,0x0e,0x1608
				0x62,0x85d7,0x06,0x1608
				0x62,0x85e3,0x50,0x1608
				0x62,0x85ef,0x00,0x1608
				0x62,0x861f,0x01,0x1608
				0x62,0x85fb,0x0c,0x1608
				0x62,0x8637,0x02,0x1608
				0x62,0x8607,0xf0,0x1608
				0x62,0x8673,0x80,0x1608
				0x62,0x85cc,0x0e,0x1608
				0x62,0x85d8,0x06,0x1608
				0x62,0x85e4,0x50,0x1608
				0x62,0x85f0,0x00,0x1608
				0x62,0x8620,0x01,0x1608
				0x62,0x85fc,0x0c,0x1608
				0x62,0x8638,0x02,0x1608
				0x62,0x8608,0xf0,0x1608
				0x62,0x8674,0x80,0x1608
				0x62,0x85cd,0x0e,0x1608
				0x62,0x85d9,0x06,0x1608
				0x62,0x85e5,0x50,0x1608
				0x62,0x85f1,0x00,0x1608
				0x62,0x8621,0x01,0x1608
				0x62,0x85fd,0x0c,0x1608
				0x62,0x8639,0x02,0x1608
				0x62,0x8609,0xf0,0x1608
				0x62,0x8675,0x80,0x1608
				0x62,0x8702,0x00,0x1608
				0x62,0x8705,0x00,0x1608
				0x62,0x8708,0x00,0x1608
				0x62,0x870b,0x00,0x1608
				0x62,0x870e,0x40,0x1608
				0x62,0x8711,0x00,0x1608
				0x62,0x8722,0x00,0x1608
				0x62,0x8725,0x40,0x1608
				0x62,0x8728,0x00,0x1608
				0x62,0x872b,0x00,0x1608
				0x62,0x872e,0x00,0x1608
				0x62,0x8731,0x00,0x1608
				0x62,0x8500,0x00,0x1608
				0x62,0x8664,0x00,0x1608
				0x62,0x8502,0x01,0x1608
				0x62,0x8666,0x00,0x1608
				0x62,0x8503,0x02,0x1608
				0x62,0x8667,0x00,0x1608
				0x62,0x8504,0x10,0x1608
				0x62,0x8668,0x00,0x1608
				0x62,0x8505,0x03,0x1608
				0x62,0x8669,0x00,0x1608
				0x62,0x8004,0x03,0x1608
				0x62,0x8544,0xe0,0x1608
				0x62,0x8545,0x21,0x1608
				0x62,0x8003,0x01,0x1608
				0x62,0x8023,0x01,0x1608
				0x62,0x8745,0x0F,0x1608
				0x62,0x8741,0x1f,0x1608
				0x62,0x874f,0x0c,0x1608
				0x62,0x874b,0x6f,0x1608
				0x62,0x8765,0x0c,0x1608
				0x62,0x8761,0x1f,0x1608
				0x62,0x876f,0x0c,0x1608
				0x62,0x876b,0x6f,0x1608
				0x62,0x8704,0x00,0x1608
				0x62,0x8724,0x00,0x1608
				0x62,0x8707,0x00,0x1608
				0x62,0x8727,0x00,0x1608
				0x62,0x870a,0x00,0x1608
				0x62,0x872a,0x00,0x1608
				0x62,0x870d,0x00,0x1608
				0x62,0x872d,0x00,0x1608
				0x62,0x8710,0x00,0x1608
				0x62,0x8730,0x00,0x1608
				0x62,0x8713,0x00,0x1608
				0x62,0x8733,0x00,0x1608
				0x62,0x85a5,0x04,0x1608
				0x62,0x85b1,0x00,0x1608
				0x62,0x85aa,0x04,0x1608
				0x62,0x85b6,0x00,0x1608
				0x62,0x85ab,0x04,0x1608
				0x62,0x85b7,0x00,0x1608
				0x62,0x85ac,0x04,0x1608
				0x62,0x85b8,0x00,0x1608
				0x62,0x85ad,0x04,0x1608
				0x62,0x85b9,0x00,0x1608
				0x62,0x85ae,0x04,0x1608
				0x62,0x85ba,0x00,0x1608
				0x62,0x85af,0x04,0x1608
				0x62,0x85bb,0x00,0x1608
				0x62,0x000c,0x01,0x1608
				0x00,0xff,0x10,0x0808
				0x62,0x8001,0x00,0x1608
				0x00,0xff,0x10,0x0808
				0x62,0x0600,0x01,0x1608
				0x62,0x0601,0x01,0x1608
				0x62,0x0602,0x01,0x1608
				0x62,0x0603,0x01,0x1608
				0x62,0x8001,0x01,0x1608
			)";

			std::vector<uint8_t> slave;
			std::vector<uint16_t> reg;
			std::vector<uint8_t> reglen;
			std::vector<uint8_t> data;
			parseRlgRegisterText(registerText, slave, reg, reglen, data);
			for (int i = 0; i < slave.size(); ++i) {
				if (slave[i] != 0) {
					if (!device_->i2cAddrWrite(reg[i], reglen[i], &data[i], 1, false, slave[i])) {
						success = false;
						setLastError(device_->getLastError());
						break;
					}
					std::this_thread::sleep_for(std::chrono::milliseconds(10));
				}
				else {
					std::this_thread::sleep_for(std::chrono::milliseconds(0xff));
				}
			}

			if (!success) {
				break;
			}
		}
		else if (sensor_type_ == SensorType::SC121AT_EEPROM_96706G_UNIVERSAL) {
			//std::string registerText =
			//R"(
			//	0x9c,0x0f,0x01,0x0808
			//	0x9c,0x05,0x79,0x0808
			//	0x9c,0x06,0x87,0x0808
			//	0x9c,0x07,0x87,0x0808
			//	0x9c,0x0d,0xb7,0x0808
			//	0x9c,0x12,0x5a,0x0808
			//	0x80,0x04,0x47,0x0808
			//	0x80,0x0e,0x00,0x0808
			//	0x80,0x07,0x85,0x0808
			//	0x80,0x04,0x87,0x0808
			//	0x80,0x0f,0x8f,0x0808
			//)";

			std::string registerText =
			R"(
				0x9c,0x0313,0x00,0x1608
				0x9c,0x0b06,0x87,0x1608
				0x9c,0x0c06,0x87,0x1608
				0x9c,0x0b07,0x84,0x1608
				0x9c,0x0c07,0x84,0x1608
				0x9c,0x0011,0x0f,0x1608
				0x9c,0x0006,0x1f,0x1608
				0x00,0xff,0xff,0x0808
				0x9c,0x0322,0x30,0x1608
				0x9c,0x0333,0x4e,0x1608
				0x9c,0x0f00,0x01,0x1608
				0x00,0xff,0xff,0x0808
				0x9c,0x040b,0x07,0x1608
				0x9c,0x042d,0x15,0x1608
				0x9c,0x040d,0x1e,0x1608
				0x9c,0x040e,0x1e,0x1608
				0x9c,0x040f,0x00,0x1608
				0x9c,0x0410,0x00,0x1608
				0x9c,0x0411,0x01,0x1608
				0x9c,0x0412,0x01,0x1608
				0x9c,0x0330,0x04,0x1608
				0x9c,0x044a,0xd0,0x1608
				0x9c,0x0320,0x26,0x1608
				0x9c,0x0325,0x80,0x1608
				0x9c,0x0319,0x08,0x1608
				0x9c,0x0316,0x5e,0x1608
				0x9c,0x0317,0x0e,0x1608
				0x9c,0x031d,0xc0,0x1608
				0x9c,0x01da,0x18,0x1608
				0x9c,0x01fa,0x18,0x1608
				0x9c,0x0b0f,0x08,0x1608
				0x9c,0x0c0f,0x08,0x1608
				0x9c,0x0ba7,0x40,0x1608
				0x9c,0x0ca7,0x40,0x1608
				0x80,0x43,0x05,0x0808
				0x80,0x47,0x2f,0x0808
				0x00,0xff,0xff,0x0808
				0x80,0x0f,0xbf,0x0808
				0x80,0x07,0x84,0x0808
				0x80,0x47,0x00,0x0808
				0x80,0x48,0x02,0x0808
				0x80,0x49,0x48,0x0808
				0x80,0x4a,0x3c,0x0808
				0x80,0x4b,0x6a,0x0808
				0x80,0x4c,0x78,0x0808
				0x00,0xff,0xff,0x0808
				0x80,0x04,0x47,0x0808
				0x80,0x07,0x86,0x0808
				0x80,0x67,0xc7,0x0808
				0x80,0x04,0x87,0x0808
				0x6c,0xae00,0x03,0x1608
				0x9c,0x0540,0x80,0x1608
				0x9c,0x0541,0x00,0x1608
				0x9c,0x0542,0x00,0x1608
				0x9c,0x0313,0x42,0x1608
			)";
			std::vector<uint8_t> slave;
			std::vector<uint16_t> reg;
			std::vector<uint8_t> reglen;
			std::vector<uint8_t> data;
			parseRlgRegisterText(registerText, slave, reg, reglen, data);
			for (int i = 0; i < slave.size(); ++i) {
				if (slave[i] != 0) {
					if (!device_->i2cAddrWrite(reg[i], reglen[i], &data[i], 1, true, slave[i])) {
						setLastError(device_->getLastError());
						success = false;
						break;
					}
					std::this_thread::sleep_for(std::chrono::milliseconds(50));
				}
				else {
					std::this_thread::sleep_for(std::chrono::milliseconds(0xff));
				}
			}

			if (!success) {
				break;
			}

			if (!device_->i2cAddrWrite(0x04, 1, { 0x43 }, true, 0x80)) {
				setLastError(device_->getLastError());
				break;
			}
		}
		else if (sensor_type_ == SensorType::SC233AT_EEPROM_TI954_UNIVERSAL) {
			std::string registerText =
			R"(
				0x00,0x00,0x80,0x0808
				0x70,0x4c,0x01,0x0808
				0x70,0x1f,0x02,0x0808
				0x70,0x58,0x5e,0x0808
				0x70,0x5c,0x30,0x0808
				0x70,0x5d,0x64,0x0808
				0x70,0x65,0x64,0x0808
				0x70,0x5e,0xa0,0x0808
				0x70,0x66,0xa0,0x0808
				0x70,0x6d,0x78,0x0808
				0x70,0x6e,0x8a,0x0808
				0x70,0x70,0x1e,0x0808
				0x70,0x72,0xe4,0x0808
				0x70,0x20,0x20,0x0808
				0x70,0x33,0x03,0x0808
				0x70,0x10,0xc1,0x0808
				0x70,0x18,0x01,0x0808
				0x70,0x0f,0x00,0x0808
				0x70,0x10,0x91,0x0808
				0x70,0x19,0x15,0x0808
				0x70,0x1a,0xae,0x0808
				0x70,0x1b,0xc3,0x0808
				0x70,0x1c,0x40,0x0808
				0x00,0x00,0xff,0x0808
				0x00,0x00,0xff,0x0808
				0x30,0x0d,0x10,0x0808
				0x30,0x02,0x73,0x0808
				0x30,0x07,0x25,0x0808
				0x00,0x00,0x64,0x0808
				0x30,0x0e,0x5a,0x0808
				0x30,0x0d,0x14,0x0808
				0x00,0x00,0xff,0x0808
			)";
			std::vector<uint8_t> slave;
			std::vector<uint16_t> reg;
			std::vector<uint8_t> reglen;
			std::vector<uint8_t> data;
			parseRlgRegisterText(registerText, slave, reg, reglen, data);
			for (int i = 0; i < slave.size(); ++i) {
				if (slave[i] != 0) {
					if (!device_->i2cAddrWrite(reg[i], reglen[i], &data[i], 1, false, slave[i])) {
						success = false;
						setLastError(device_->getLastError());
						break;
					}
					std::this_thread::sleep_for(std::chrono::milliseconds(10));
				}
				else {
					std::this_thread::sleep_for(std::chrono::milliseconds(0xff));
				}
			}

			if (!success) {
				break;
			}
		}
		else if (sensor_type_ == SensorType::SC121AT_EEPROM_RLC92402_UNIVERSAL) {
			std::string registerText = 
			R"(
				0xc0,0x78db,0x6a,0x1608
				0xc0,0x9cb0,0x3f,0x1608
				0xc0,0x9c0f,0x01,0x1608
				0xc0,0x8817,0xfd,0x1608
				0xc0,0x887c,0x8d,0x1608
				0xc0,0x887e,0x12,0x1608
				0xc0,0x8a54,0x00,0x1608
				0xc0,0x88ce,0x76,0x1608
				0xc0,0x88ee,0x19,0x1608
				0xc0,0x88ef,0xd6,0x1608
				0xc0,0x88f1,0x2a,0x1608
				0xc0,0x8c17,0xfd,0x1608
				0xc0,0x8c7c,0x8d,0x1608
				0xc0,0x8c7e,0x12,0x1608
				0xc0,0x8e54,0x00,0x1608
				0xc0,0x8cce,0x76,0x1608
				0xc0,0x9017,0xfd,0x1608
				0xc0,0x907c,0x8d,0x1608
				0xc0,0x907e,0x12,0x1608
				0xc0,0x9254,0x00,0x1608
				0xc0,0x90ce,0x76,0x1608
				0xc0,0x0083,0xff,0x1608
				0xc0,0x0082,0xf8,0x1608
				0xc0,0x0089,0x01,0x1608
				0xc0,0x0081,0x08,0x1608
				0xc0,0x8001,0x01,0x1608
				0xc0,0x8401,0x01,0x1608
				0xc0,0x9001,0x01,0x1608
				0xc0,0x9401,0x01,0x1608
				0xc0,0x0018,0x02,0x1608
				0xc0,0x0025,0xfe,0x1608
				0xc0,0x9c00,0x01,0x1608
				0xc0,0x0406,0x01,0x1608
				0xc0,0x04e8,0x19,0x1608
				0xc0,0x046a,0x00,0x1608
				0xc0,0x0554,0x19,0x1608
				0xc0,0x0408,0x05,0x1608
				0xc0,0x0409,0x0a,0x1608
				0xc0,0x040a,0x23,0x1608
				0xc0,0x0410,0x00,0x1608
				0xc0,0x0411,0xc0,0x1608
				0xc0,0x0412,0x00,0x1608
				0xc0,0x0413,0x00,0x1608
				0xc0,0x0414,0x00,0x1608
				0xc0,0x0415,0x01,0x1608
				0xc0,0x044e,0x01,0x1608
				0xc0,0x04b0,0x0b,0x1608
				0xc0,0x04b1,0x20,0x1608
				0xc0,0x04b2,0x16,0x1608
				0xc0,0x04b3,0x0a,0x1608
				0xc0,0x04b4,0x50,0x1608
				0xc0,0x04b5,0x15,0x1608
				0xc0,0x04b6,0x01,0x1608
				0xc0,0x04b7,0x0e,0x1608
				0xc0,0x04b8,0x1e,0x1608
				0xc0,0x04b9,0x0f,0x1608
				0xc0,0x0603,0x40,0x1608
				0xc0,0x0602,0x08,0x1608
				0xc0,0x0601,0x81,0x1608
				0xc0,0x0600,0x44,0x1608
				0xc0,0x0617,0x80,0x1608
				0xc0,0x061b,0x80,0x1608
				0xc0,0x061f,0x81,0x1608
				0xc0,0x0623,0x82,0x1608
				0xc0,0x0627,0x83,0x1608
				0xc0,0x0607,0x40,0x1608
				0xc0,0x0606,0x08,0x1608
				0xc0,0x0605,0x0f,0x1608
				0xc0,0x0604,0x0a,0x1608
				0xc0,0x0040,0x00,0x1608
				0xc0,0x003f,0x0f,0x1608
				0xc0,0x003f,0x00,0x1608
				0xc0,0x0045,0x00,0x1608
				0xc0,0x78e2,0x07,0x1608
				0xc0,0x7a1e,0x00,0x1608
				0xc0,0x7a21,0x00,0x1608
				0xc0,0x7876,0xf0,0x1608
				0xc0,0x7877,0x00,0x1608
				0xc0,0x78d7,0x01,0x1608
				0xc0,0x7800,0x01,0x1608
				0xc0,0x3804,0x01,0x1608
				0xc0,0x3806,0x01,0x1608
				0xc0,0x38a5,0x13,0x1608
				0xc0,0x38a7,0x13,0x1608
				0xc0,0x3985,0x40,0x1608
				0xc0,0x3986,0x42,0x1608
				0xc0,0x3987,0x0f,0x1608
				0xc0,0x3988,0xff,0x1608
				0xc0,0x3989,0xff,0x1608
				0xc0,0x380c,0x01,0x1608
				0xc0,0x0025,0xff,0x1608
				0xc0,0x1434,0x0c,0x1608
				0xc0,0x1701,0x01,0x1608
				0x00,0x0000,0x32,0x1608
				0x84,0x4521,0x3f,0x1608
				0x84,0x486f,0x01,0x1608
				0x84,0x4428,0xfe,0x1608
				0x84,0x4554,0x73,0x1608
				0x84,0x4400,0x01,0x1608
				0x00,0x0000,0x32,0x1608
				0x84,0x0031,0xc0,0x1608
				0x84,0x0031,0xf0,0x1608
				0x84,0x3019,0x80,0x1608
				0x84,0x0600,0x42,0x1608
				0x84,0x0637,0x80,0x1608
				0x84,0x063b,0x81,0x1608
				0x84,0x063f,0x02,0x1608
				0x84,0x0643,0x03,0x1608
				0x84,0x300f,0x00,0x1608
				0x84,0x3013,0x09,0x1608
				0x84,0x4564,0x01,0x1608
				0x84,0x4562,0x3e,0x1608
				0x84,0x4563,0x3f,0x1608
				0x84,0x4565,0x01,0x1608
				0x84,0x444b,0x87,0x1608
				0x84,0x441d,0x02,0x1608
				0x84,0x4400,0x01,0x1608
				0x00,0x0000,0x32,0x1608
				0x84,0x0031,0xc0,0x1608
				0x84,0x0031,0x00,0x1608
				0x84,0x3019,0xa0,0x1608
				0x00,0x0000,0x32,0x1608
				0x84,0x3009,0x00,0x1608
				0x84,0x3005,0x0a,0x1608
				0x84,0x3008,0x13,0x1608
			)";

			std::vector<uint8_t> slave;
			std::vector<uint16_t> reg;
			std::vector<uint8_t> reglen;
			std::vector<uint8_t> data;
			parseRlgRegisterText(registerText, slave, reg, reglen, data);
			for (int i = 0; i < slave.size(); ++i) {
				if (slave[i] != 0) {
					if (!device_->i2cAddrWrite(reg[i], reglen[i], &data[i], 1, false, slave[i])) {
						success = false;
						setLastError(device_->getLastError());
						break;
					}
					std::this_thread::sleep_for(std::chrono::milliseconds(10));
				}
				else {
					std::this_thread::sleep_for(std::chrono::milliseconds(0xff));
				}
			}

			if (!success) {
				break;
			}
		}
		else {
			setLastError("不支持的烧录模式");
			break;
		}
		result = true;
	} while (false);
	return result;
}

bool isp::Sc220At::readFile(uint8_t* data, uint32_t size, int* percent)
{
	bool result = false, success = true;
	struct ihex_state ihex;
	ihex_new_buffer(&ihex);
	do
	{
		if (!openBridge() || !disableWp()) {
			break;
		}

		if (file_type_ == FileType::HEX_FILE) {
			size = read_size_;
		}

		for (uint32_t i = 0; i < size; i += 16) {
			*percent = getPercent(i, size);

			if (!device_->i2cAddrRead(i, 2, data + i, size - i > 16 ? 16 : size - i)) {
				success = false;
				setLastError(device_->getLastError());
				break;
			}
		}

		if (!success) {
			break;
		}

		if (!enableWp() || !closeBridge()) {
			break;
		}

		if (file_type_ == FileType::HEX_FILE) {
			ihex_begin_write(&ihex);
			ihex_set_output_line_length(&ihex, 0x10);
			ihex_write_bytes(&ihex, (const char*)data, size);
			ihex_end_write(&ihex);

			for (size_t i = 0; i < ihex.buffer.size; ++i) {
				ihex.buffer.data[i] = tolower(ihex.buffer.data[i]);
			}
			memcpy(data, ihex.buffer.data, ihex.buffer.size);
		}

		result = true;
	} while (false);
	ihex_free_buffer(&ihex);
	return result;
}

bool isp::Sc220At::writeFile(const uint8_t* data, uint32_t size, int* percent)
{
	bool result = false, success = true;
	struct ihex_state ihex;
	ihex_new_buffer(&ihex);
	do
	{
		if (file_type_ == FileType::HEX_FILE) {
			read_size_ = 0;
			ihex_begin_read(&ihex);
			switch (ihex_read_bytes(&ihex, (const char*)data, size))
			{
			case -1:
				success = false;
				setLastError("烧录文件校验和错误,在%lu行", ihex.line_number);
				break;
			case -2:
				success = false;
				setLastError("烧录文件长度错误,在%lu行", ihex.line_number);
				break;
			default:
				break;
			}
			ihex_end_read(&ihex);

			if (!success) {
				break;
			}

			data = ihex.buffer.data;
			size = ihex.buffer.size;
			read_size_ = size;
		}

		if (!openBridge() || !disableWp()) {
			break;
		}

		uint8_t erase[16] = { 0 };
		memset(erase, 0xff, sizeof(erase));

		for (uint32_t i = 0; i < size; i += 16)
		{
			*percent = getPercent(i, size);

			if (!device_->i2cAddrWrite(i, 2, erase, sizeof(erase))) {
				success = false;
				setLastError(device_->getLastError());
				break;
			}
			std::this_thread::sleep_for(std::chrono::milliseconds(5));

			if (!device_->i2cAddrWrite(i, 2, data + i, size - i > 16 ? 16 : size - i)) {
				success = false;
				setLastError(device_->getLastError());
				break;
			}
			std::this_thread::sleep_for(std::chrono::milliseconds(5));
		}

		if (!success)
		{
			break;
		}

		if (!enableWp() || !closeBridge()) {
			break;
		}

		result = true;
	} while (false);
	ihex_free_buffer(&ihex);
	return result;
}

bool isp::Sc220At::readEeprom(uint32_t address, uint8_t* data, uint16_t size)
{
	if (!device_->i2cAddrRead(address, 2, data, size)) {
		setLastError(device_->getLastError());
		return false;
	}
	return true;
}

bool isp::Sc220At::writeEeprom(uint32_t address, const uint8_t* data, uint16_t size)
{
	if (!device_->i2cAddrWrite(address, 2, data, size)) {
		setLastError(device_->getLastError());
		return false;
	}
	return true;
}

bool isp::Sc220At::readData(uint32_t address, uint8_t* data, uint16_t size)
{
	if (!device_->i2cAddrRead(address, 2, data, size)) {
		setLastError(device_->getLastError());
		return false;
	}
	return true;
}

bool isp::Sc220At::writeData(uint32_t address, const uint8_t* data, uint16_t size)
{
	if (!device_->i2cAddrWrite(address, 2, data, size)) {
		setLastError(device_->getLastError());
		return false;
	}
	return true;
}

bool isp::Sc220At::openBridge()
{
	bool result = false;
	do 
	{
		uint16_t slave = 0x60;
		if (sensor_type_ == SensorType::SC233AT_EEPROM_TI954_UNIVERSAL) {
			slave = 0x64;
		}

		/*0x309d Bit[2] set 1*/
		uint8_t data = 0xf4;
		if (!device_->i2cAddrWrite(0x309d, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		/*0x3034 Bit[3] set 1*/
		data = 0x0b;
		if (!device_->i2cAddrWrite(0x3034, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		/*0x3641 Bit[7] set 1*/
		data = 0x92;
		if (!device_->i2cAddrWrite(0x3641, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
		result = true;
	} while (false);
	return result;
}

bool isp::Sc220At::closeBridge()
{
	bool result = false;
	do 
	{
		uint16_t slave = 0x60;
		if (sensor_type_ == SensorType::SC233AT_EEPROM_TI954_UNIVERSAL) {
			slave = 0x64;
		}

		/*0x309d Bit[2] set 0*/
		uint8_t data = 0xf0;
		if (!device_->i2cAddrWrite(0x309d, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		/*0x3034 Bit[3] set 0*/
		data = 0x03;
		if (!device_->i2cAddrWrite(0x3034, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		/*0x3641 Bit[7] set 0*/
		data = 0x12;
		if (!device_->i2cAddrWrite(0x3641, 2, &data, 1, false, slave)) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		result = true;
	} while (false);
	return result;
}

bool isp::Sc220At::enableWp()
{
	bool result = false;
	do 
	{
		uint8_t slave = 0x60;

		uint8_t reg1[3] = { 0x30, 0x0c, 0x02 };
		if (device_->i2cWrite(reg1, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg2[3] = { 0x30, 0x17, 0x00 };
		if (device_->i2cWrite(reg2, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg3[3] = { 0x30, 0x16, 0x00 };
		if (device_->i2cWrite(reg3, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg4[3] = { 0x30, 0x44, 0x00 };
		if (device_->i2cWrite(reg4, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg5[3] = { 0x33,0x13,0x88 };
		if (device_->i2cWrite(reg5, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
		result = true;
	} while (false);
	return result;
}

bool isp::Sc220At::disableWp()
{
	bool result = false;
	do 
	{
		uint16_t slave = 0x60;
		uint8_t reg1[3] = { 0x30, 0x0c, 0x22 };
		if (device_->i2cWrite(reg1, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg2[3] = { 0x30, 0x17, 0x00 };
		if (device_->i2cWrite(reg2, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg3[3] = { 0x30, 0x16, 0x20 };
		if (device_->i2cWrite(reg3, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg4[3] = { 0x30, 0x44, 0x10 };
		if (device_->i2cWrite(reg4, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));

		uint8_t reg5[3] = { 0x33,0x13,0x22 };
		if (device_->i2cWrite(reg5, 3, slave) != 3) {
			setLastError(device_->getLastError());
			break;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
		result = true;
	} while (false);
	return result;
}

//bool isp::Sc220At::unprotect()
//{
//	bool result = false;
//	do
//	{
//		int delay = 10;
//		uint8_t data = 0;
//		if (!device_->i2cAddrRead(0x300c, 2, &data, 1, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		data |= (1 << 5);
//		if (!device_->i2cAddrWrite(0x300c, 2, { data }, false, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		if (!device_->i2cAddrWrite(0x3017, 2, { 0x00 }, false, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		if (!device_->i2cAddrRead(0x3016, 2, &data, 1, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		data &= ~(1 << 5);
//		if (!device_->i2cAddrWrite(0x3016, 2, { data }, false, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		if (!device_->i2cAddrWrite(0x3044, 2, { 0x10 }, false, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		if (!device_->i2cAddrWrite(0x3313, 2, { 0x22 }, false, 0x60))
//		{
//			break;
//		}
//		std::this_thread::sleep_for(std::chrono::milliseconds(delay);
//
//		result = true;
//	} while (false);
//	return result;
//}

